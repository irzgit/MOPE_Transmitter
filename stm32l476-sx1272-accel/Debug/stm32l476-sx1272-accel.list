
stm32l476-sx1272-accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de0  08005de0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08005e58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005e58  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011070  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f6  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002710d  00000000  00000000  00034c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aec1  00000000  00000000  0005bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec1bc  00000000  00000000  00066c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152e1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  00152e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d0c 	.word	0x08005d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d0c 	.word	0x08005d0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000574:	21ff      	movs	r1, #255	; 0xff
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fe2e 	bl	80011d8 <SPIWrite>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000584:	2101      	movs	r1, #1
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fe26 	bl	80011d8 <SPIWrite>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fe1e 	bl	80011d8 <SPIWrite>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fe16 	bl	80011d8 <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <Rf96_FreqChoose+0x28>)
 80005c4:	4413      	add	r3, r2
 80005c6:	2203      	movs	r2, #3
 80005c8:	4619      	mov	r1, r3
 80005ca:	2006      	movs	r0, #6
 80005cc:	f000 fe5a 	bl	8001284 <BurstWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08005d44 	.word	0x08005d44

080005dc <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <Rf96_OutPower+0x28>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2009      	movs	r0, #9
 80005f0:	f000 fdf2 	bl	80011d8 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 80005f4:	2187      	movs	r1, #135	; 0x87
 80005f6:	205a      	movs	r0, #90	; 0x5a
 80005f8:	f000 fdee 	bl	80011d8 <SPIWrite>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08005d50 	.word	0x08005d50

08000608 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <Rf96_OCP+0x20>)
 8000616:	5cd3      	ldrb	r3, [r2, r3]
 8000618:	4619      	mov	r1, r3
 800061a:	200b      	movs	r0, #11
 800061c:	f000 fddc 	bl	80011d8 <SPIWrite>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08005d54 	.word	0x08005d54

0800062c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <Rf96_LNA+0x20>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	4619      	mov	r1, r3
 800063e:	200c      	movs	r0, #12
 8000640:	f000 fdca 	bl	80011d8 <SPIWrite>

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	08005d58 	.word	0x08005d58

08000650 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	460b      	mov	r3, r1
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	4613      	mov	r3, r2
 8000660:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C); // БЕЗ CRC
	SPIWrite(LR_RegModemConfig1,0x8E); // с CRC
 8000662:	218e      	movs	r1, #142	; 0x8e
 8000664:	201d      	movs	r0, #29
 8000666:	f000 fdb7 	bl	80011d8 <SPIWrite>
	SPIWrite(LR_RegDetectOptimize,0xC5);
 800066a:	21c5      	movs	r1, #197	; 0xc5
 800066c:	2031      	movs	r0, #49	; 0x31
 800066e:	f000 fdb3 	bl	80011d8 <SPIWrite>
	SPIWrite(LR_RegDetecionThreshold,0x0C);
 8000672:	210c      	movs	r1, #12
 8000674:	2037      	movs	r0, #55	; 0x37
 8000676:	f000 fdaf 	bl	80011d8 <SPIWrite>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	460b      	mov	r3, r1
 800068e:	71bb      	strb	r3, [r7, #6]
 8000690:	4613      	mov	r3, r2
 8000692:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x67);
 8000694:	2167      	movs	r1, #103	; 0x67
 8000696:	201e      	movs	r0, #30
 8000698:	f000 fd9e 	bl	80011d8 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 800069c:	88bb      	ldrh	r3, [r7, #4]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	201f      	movs	r0, #31
 80006a4:	f000 fd98 	bl	80011d8 <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	2020      	movs	r0, #32
 80006c6:	f000 fd87 	bl	80011d8 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	2021      	movs	r0, #33	; 0x21
 80006d2:	f000 fd81 	bl	80011d8 <SPIWrite>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	460a      	mov	r2, r1
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	4613      	mov	r3, r2
 80006ec:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2040      	movs	r0, #64	; 0x40
 8000702:	f000 fd69 	bl	80011d8 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_irqMaskRX>:
{
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
}
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 8000712:	213f      	movs	r1, #63	; 0x3f
 8000714:	2011      	movs	r0, #17
 8000716:	f000 fd5f 	bl	80011d8 <SPIWrite>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}

0800071e <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4619      	mov	r1, r3
 800072c:	2022      	movs	r0, #34	; 0x22
 800072e:	f000 fd53 	bl	80011d8 <SPIWrite>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Rf96_RX_FifoAdr>:
{
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
}
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4619      	mov	r1, r3
 8000748:	200f      	movs	r0, #15
 800074a:	f000 fd45 	bl	80011d8 <SPIWrite>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4619      	mov	r1, r3
 8000764:	200d      	movs	r0, #13
 8000766:	f000 fd37 	bl	80011d8 <SPIWrite>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000776:	2185      	movs	r1, #133	; 0x85
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fd2d 	bl	80011d8 <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <Rf96_DataRX_From_FiFO>:
{
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
}
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 800078a:	2010      	movs	r0, #16
 800078c:	f000 fd06 	bl	800119c <SPIRead>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4619      	mov	r1, r3
 8000798:	200d      	movs	r0, #13
 800079a:	f000 fd1d 	bl	80011d8 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079e:	2013      	movs	r0, #19
 80007a0:	f000 fcfc 	bl	800119c <SPIRead>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	461a      	mov	r2, r3
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fd36 	bl	8001220 <SPIBurstRead>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007c0:	f7ff fee6 	bl	8000590 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c4:	f7ff feec 	bl	80005a0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fef1 	bl	80005b0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff04 	bl	80005dc <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff26 	bl	800062c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff33 	bl	8000650 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 80007ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007ee:	2101      	movs	r1, #1
 80007f0:	2006      	movs	r0, #6
 80007f2:	f7ff ff46 	bl	8000682 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f6:	2008      	movs	r0, #8
 80007f8:	f7ff ff5a 	bl	80006b0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 80007fc:	f7ff fec0 	bl	8000580 <Rf96_Standby>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <Rf96_Lora_RX_mode>:
	  Rf96_FIFO_point(0x80);

}
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	  SPIWrite(REG_LR_PADAC,0x84);                            //Normal and Rx
 8000808:	2184      	movs	r1, #132	; 0x84
 800080a:	204d      	movs	r0, #77	; 0x4d
 800080c:	f000 fce4 	bl	80011d8 <SPIWrite>
	  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
 8000810:	21ff      	movs	r1, #255	; 0xff
 8000812:	2024      	movs	r0, #36	; 0x24
 8000814:	f000 fce0 	bl	80011d8 <SPIWrite>

	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1(0,0);
 8000818:	2100      	movs	r1, #0
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff5f 	bl	80006de <Rf96_PinOut_Di0_Di1>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000820:	f7ff ff75 	bl	800070e <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000824:	f7ff fea4 	bl	8000570 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 8000828:	201b      	movs	r0, #27
 800082a:	f7ff ff78 	bl	800071e <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff83 	bl	800073a <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff8e 	bl	8000756 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800083a:	f7ff ff9a 	bl	8000772 <Rf96_RX_Continuous_mode>

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <transmit>:
    return crc;
}


void transmit(uint8_t str[27])
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af08      	add	r7, sp, #32
 800084a:	6078      	str	r0, [r7, #4]
			//0x68 - команда возврата данных с акселерометра
//			if(str[3] == 0x84)
//			{
				// первый акселерометр
				// Ось Х
				xIntSumFirst = (str[0] & 0x0F) * 10 + (str[1] >> 4); // целочисленная сумма X
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f003 020f 	and.w	r2, r3, #15
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	091b      	lsrs	r3, r3, #4
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4413      	add	r3, r2
 800086a:	4aa3      	ldr	r2, [pc, #652]	; (8000af8 <transmit+0x2b4>)
 800086c:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5First = str[1] & 0x0F; //перевод правого бита 5го байта
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	4aa0      	ldr	r2, [pc, #640]	; (8000afc <transmit+0x2b8>)
 800087a:	6013      	str	r3, [r2, #0]
				x60First = str[2] >> 4; //перевод левого бита 6го байта
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3302      	adds	r3, #2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <transmit+0x2bc>)
 800088a:	601a      	str	r2, [r3, #0]
				x65First = str[2] & 0x0F; //перевод правого бита 6го байта
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3302      	adds	r3, #2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	4a9b      	ldr	r2, [pc, #620]	; (8000b04 <transmit+0x2c0>)
 8000898:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d ",xIntSumFirst, x5First, x60First);
 800089a:	4b97      	ldr	r3, [pc, #604]	; (8000af8 <transmit+0x2b4>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b97      	ldr	r3, [pc, #604]	; (8000afc <transmit+0x2b8>)
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	4b97      	ldr	r3, [pc, #604]	; (8000b00 <transmit+0x2bc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	460b      	mov	r3, r1
 80008aa:	4997      	ldr	r1, [pc, #604]	; (8000b08 <transmit+0x2c4>)
 80008ac:	4897      	ldr	r0, [pc, #604]	; (8000b0c <transmit+0x2c8>)
 80008ae:	f004 fe27 	bl	8005500 <siprintf>
				if((str[0] >> 4) == 0x01)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d102      	bne.n	80008c4 <transmit+0x80>
					xvalFirst[0] = '-';
 80008be:	4b93      	ldr	r3, [pc, #588]	; (8000b0c <transmit+0x2c8>)
 80008c0:	222d      	movs	r2, #45	; 0x2d
 80008c2:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[3] & 0x0F) * 10 + (str[4] >> 4);	// целочисленная сумма Y
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3303      	adds	r3, #3
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	f003 020f 	and.w	r2, r3, #15
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3304      	adds	r3, #4
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4413      	add	r3, r2
 80008e4:	4a8a      	ldr	r2, [pc, #552]	; (8000b10 <transmit+0x2cc>)
 80008e6:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8First = str[4] & 0x0F; //перевод правого бита 8го байта
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3304      	adds	r3, #4
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	4a88      	ldr	r2, [pc, #544]	; (8000b14 <transmit+0x2d0>)
 80008f4:	6013      	str	r3, [r2, #0]
				y90First = str[5] >> 4; //перевод левого бита 9го байта
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3305      	adds	r3, #5
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	4b85      	ldr	r3, [pc, #532]	; (8000b18 <transmit+0x2d4>)
 8000904:	601a      	str	r2, [r3, #0]
				y95First = str[5] & 0x0F; //перевод правого бита 9го байта
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3305      	adds	r3, #5
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	4a82      	ldr	r2, [pc, #520]	; (8000b1c <transmit+0x2d8>)
 8000912:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d ", yIntSumFirst, y8First, y90First);
 8000914:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <transmit+0x2cc>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b7e      	ldr	r3, [pc, #504]	; (8000b14 <transmit+0x2d0>)
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	4b7e      	ldr	r3, [pc, #504]	; (8000b18 <transmit+0x2d4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	460b      	mov	r3, r1
 8000924:	4978      	ldr	r1, [pc, #480]	; (8000b08 <transmit+0x2c4>)
 8000926:	487e      	ldr	r0, [pc, #504]	; (8000b20 <transmit+0x2dc>)
 8000928:	f004 fdea 	bl	8005500 <siprintf>
				if((str[3] >> 4) == 0x01)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3303      	adds	r3, #3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b01      	cmp	r3, #1
 8000938:	d102      	bne.n	8000940 <transmit+0xfc>
					yvalFirst[0] = '-';
 800093a:	4b79      	ldr	r3, [pc, #484]	; (8000b20 <transmit+0x2dc>)
 800093c:	222d      	movs	r2, #45	; 0x2d
 800093e:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[6] & 0x0F) * 10 + (str[7] >> 4); //целочисленная сумма Z
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3306      	adds	r3, #6
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f003 020f 	and.w	r2, r3, #15
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3307      	adds	r3, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4413      	add	r3, r2
 8000960:	4a70      	ldr	r2, [pc, #448]	; (8000b24 <transmit+0x2e0>)
 8000962:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11First = str[7] & 0x0F; //перевод правого бита 11го байта
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3307      	adds	r3, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	4a6e      	ldr	r2, [pc, #440]	; (8000b28 <transmit+0x2e4>)
 8000970:	6013      	str	r3, [r2, #0]
				z120First = str[8] >> 4; //перевод левого бита 12го байта
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3308      	adds	r3, #8
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	4b6b      	ldr	r3, [pc, #428]	; (8000b2c <transmit+0x2e8>)
 8000980:	601a      	str	r2, [r3, #0]
				z125First = str[8] & 0x0F; //перевод правого бита 12го байта
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3308      	adds	r3, #8
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	f003 030f 	and.w	r3, r3, #15
 800098c:	4a68      	ldr	r2, [pc, #416]	; (8000b30 <transmit+0x2ec>)
 800098e:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d ", zIntSumFirst, z11First, z120First);
 8000990:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <transmit+0x2e0>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <transmit+0x2e4>)
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <transmit+0x2e8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	460b      	mov	r3, r1
 80009a0:	4959      	ldr	r1, [pc, #356]	; (8000b08 <transmit+0x2c4>)
 80009a2:	4864      	ldr	r0, [pc, #400]	; (8000b34 <transmit+0x2f0>)
 80009a4:	f004 fdac 	bl	8005500 <siprintf>
				if((str[6] >> 4) == 0x01)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3306      	adds	r3, #6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d102      	bne.n	80009bc <transmit+0x178>
					zvalFirst[0] = '-';
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <transmit+0x2f0>)
 80009b8:	222d      	movs	r2, #45	; 0x2d
 80009ba:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[9] & 0x0F) * 10 + (str[10] >> 4); // целочисленная сумма X
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3309      	adds	r3, #9
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 020f 	and.w	r2, r3, #15
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	330a      	adds	r3, #10
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	4a56      	ldr	r2, [pc, #344]	; (8000b38 <transmit+0x2f4>)
 80009de:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5Second = str[10] & 0x0F; //перевод правого бита 5го байта
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	330a      	adds	r3, #10
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	4a54      	ldr	r2, [pc, #336]	; (8000b3c <transmit+0x2f8>)
 80009ec:	6013      	str	r3, [r2, #0]
				x60Second = str[11] >> 4; //перевод левого бита 6го байта
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	330b      	adds	r3, #11
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <transmit+0x2fc>)
 80009fc:	601a      	str	r2, [r3, #0]
				x65Second = str[11] & 0x0F; //перевод правого бита 6го байта
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	330b      	adds	r3, #11
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	4a4e      	ldr	r2, [pc, #312]	; (8000b44 <transmit+0x300>)
 8000a0a:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d ",xIntSumSecond, x5Second, x60Second);
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <transmit+0x2f4>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <transmit+0x2f8>)
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <transmit+0x2fc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	493a      	ldr	r1, [pc, #232]	; (8000b08 <transmit+0x2c4>)
 8000a1e:	484a      	ldr	r0, [pc, #296]	; (8000b48 <transmit+0x304>)
 8000a20:	f004 fd6e 	bl	8005500 <siprintf>
				if((str[9] >> 4) == 0x01)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3309      	adds	r3, #9
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d102      	bne.n	8000a38 <transmit+0x1f4>
					xvalSecond[0] = '-';
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <transmit+0x304>)
 8000a34:	222d      	movs	r2, #45	; 0x2d
 8000a36:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[12] & 0x0F) * 10 + (str[13] >> 4);	// целочисленная сумма Y
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	330c      	adds	r3, #12
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f003 020f 	and.w	r2, r3, #15
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	330d      	adds	r3, #13
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	4a3c      	ldr	r2, [pc, #240]	; (8000b4c <transmit+0x308>)
 8000a5a:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8Second = str[13] & 0x0F; //перевод правого бита 8го байта
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	330d      	adds	r3, #13
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <transmit+0x30c>)
 8000a68:	6013      	str	r3, [r2, #0]
				y90Second = str[14] >> 4; //перевод левого бита 9го байта
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	330e      	adds	r3, #14
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <transmit+0x310>)
 8000a78:	601a      	str	r2, [r3, #0]
				y95Second = str[14] & 0x0F; //перевод правого бита 9го байта
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f003 030f 	and.w	r3, r3, #15
 8000a84:	4a34      	ldr	r2, [pc, #208]	; (8000b58 <transmit+0x314>)
 8000a86:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d ", yIntSumSecond, y8Second, y90Second);
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <transmit+0x308>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <transmit+0x30c>)
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <transmit+0x310>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	460b      	mov	r3, r1
 8000a98:	491b      	ldr	r1, [pc, #108]	; (8000b08 <transmit+0x2c4>)
 8000a9a:	4830      	ldr	r0, [pc, #192]	; (8000b5c <transmit+0x318>)
 8000a9c:	f004 fd30 	bl	8005500 <siprintf>
				if((str[12] >> 4) == 0x01)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <transmit+0x270>
					yvalSecond[0] = '-';
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <transmit+0x318>)
 8000ab0:	222d      	movs	r2, #45	; 0x2d
 8000ab2:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[15] & 0x0F) * 10 + (str[16] >> 4); //целочисленная сумма Z
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	330f      	adds	r3, #15
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f003 020f 	and.w	r2, r3, #15
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3310      	adds	r3, #16
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <transmit+0x31c>)
 8000ad6:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11Second = str[16] & 0x0F; //перевод правого бита 11го байта
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3310      	adds	r3, #16
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <transmit+0x320>)
 8000ae4:	6013      	str	r3, [r2, #0]
				z120Second = str[17] >> 4; //перевод левого бита 12го байта
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3311      	adds	r3, #17
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <transmit+0x324>)
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e039      	b.n	8000b6c <transmit+0x328>
 8000af8:	20000310 	.word	0x20000310
 8000afc:	200001f0 	.word	0x200001f0
 8000b00:	20000304 	.word	0x20000304
 8000b04:	200001fc 	.word	0x200001fc
 8000b08:	08005d24 	.word	0x08005d24
 8000b0c:	200000bc 	.word	0x200000bc
 8000b10:	20000190 	.word	0x20000190
 8000b14:	20000194 	.word	0x20000194
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	20000138 	.word	0x20000138
 8000b20:	200000d4 	.word	0x200000d4
 8000b24:	20000204 	.word	0x20000204
 8000b28:	20000120 	.word	0x20000120
 8000b2c:	200000e0 	.word	0x200000e0
 8000b30:	200001f8 	.word	0x200001f8
 8000b34:	20000208 	.word	0x20000208
 8000b38:	2000018c 	.word	0x2000018c
 8000b3c:	20000308 	.word	0x20000308
 8000b40:	200000dc 	.word	0x200000dc
 8000b44:	20000188 	.word	0x20000188
 8000b48:	200000a0 	.word	0x200000a0
 8000b4c:	20000134 	.word	0x20000134
 8000b50:	200001f4 	.word	0x200001f4
 8000b54:	20000278 	.word	0x20000278
 8000b58:	2000009c 	.word	0x2000009c
 8000b5c:	20000198 	.word	0x20000198
 8000b60:	20000098 	.word	0x20000098
 8000b64:	20000318 	.word	0x20000318
 8000b68:	20000124 	.word	0x20000124
				z125Second = str[17] & 0x0F; //перевод правого бита 12го байта
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3311      	adds	r3, #17
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	4a79      	ldr	r2, [pc, #484]	; (8000d5c <transmit+0x518>)
 8000b78:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d ", zIntSumSecond, z11Second, z120Second);
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <transmit+0x51c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b79      	ldr	r3, [pc, #484]	; (8000d64 <transmit+0x520>)
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	4b79      	ldr	r3, [pc, #484]	; (8000d68 <transmit+0x524>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4978      	ldr	r1, [pc, #480]	; (8000d6c <transmit+0x528>)
 8000b8c:	4878      	ldr	r0, [pc, #480]	; (8000d70 <transmit+0x52c>)
 8000b8e:	f004 fcb7 	bl	8005500 <siprintf>
				if((str[15] >> 4) == 0x01)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	330f      	adds	r3, #15
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d102      	bne.n	8000ba6 <transmit+0x362>
					zvalSecond[0] = '-';
 8000ba0:	4b73      	ldr	r3, [pc, #460]	; (8000d70 <transmit+0x52c>)
 8000ba2:	222d      	movs	r2, #45	; 0x2d
 8000ba4:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[18] & 0x0F) * 10 + (str[19] >> 4); // целочисленная сумма X
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3312      	adds	r3, #18
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f003 020f 	and.w	r2, r3, #15
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	461a      	mov	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3313      	adds	r3, #19
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a6b      	ldr	r2, [pc, #428]	; (8000d74 <transmit+0x530>)
 8000bc8:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5Third = str[19] & 0x0F; //перевод правого бита 5го байта
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3313      	adds	r3, #19
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	4a68      	ldr	r2, [pc, #416]	; (8000d78 <transmit+0x534>)
 8000bd6:	6013      	str	r3, [r2, #0]
				x60Third = str[20] >> 4; //перевод левого бита 6го байта
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3314      	adds	r3, #20
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <transmit+0x538>)
 8000be6:	601a      	str	r2, [r3, #0]
				x65Third = str[20] & 0x0F; //перевод правого бита 6го байта
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3314      	adds	r3, #20
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	4a63      	ldr	r2, [pc, #396]	; (8000d80 <transmit+0x53c>)
 8000bf4:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d ",xIntSumThird, x5Third, x60Third);
 8000bf6:	4b5f      	ldr	r3, [pc, #380]	; (8000d74 <transmit+0x530>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b5f      	ldr	r3, [pc, #380]	; (8000d78 <transmit+0x534>)
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	4b5f      	ldr	r3, [pc, #380]	; (8000d7c <transmit+0x538>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	460b      	mov	r3, r1
 8000c06:	4959      	ldr	r1, [pc, #356]	; (8000d6c <transmit+0x528>)
 8000c08:	485e      	ldr	r0, [pc, #376]	; (8000d84 <transmit+0x540>)
 8000c0a:	f004 fc79 	bl	8005500 <siprintf>
				if((str[18] >> 4) == 0x01)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3312      	adds	r3, #18
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <transmit+0x3de>
					xvalThird[0] = '-';
 8000c1c:	4b59      	ldr	r3, [pc, #356]	; (8000d84 <transmit+0x540>)
 8000c1e:	222d      	movs	r2, #45	; 0x2d
 8000c20:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[21] & 0x0F) * 10 + (str[22] >> 4);	// целочисленная сумма Y
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3315      	adds	r3, #21
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f003 020f 	and.w	r2, r3, #15
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3316      	adds	r3, #22
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4413      	add	r3, r2
 8000c42:	4a51      	ldr	r2, [pc, #324]	; (8000d88 <transmit+0x544>)
 8000c44:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8Third = str[22] & 0x0F; //перевод правого бита 8го байта
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3316      	adds	r3, #22
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	4a4e      	ldr	r2, [pc, #312]	; (8000d8c <transmit+0x548>)
 8000c52:	6013      	str	r3, [r2, #0]
				y90Third = str[23] >> 4; //перевод левого бита 9го байта
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3317      	adds	r3, #23
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b4b      	ldr	r3, [pc, #300]	; (8000d90 <transmit+0x54c>)
 8000c62:	601a      	str	r2, [r3, #0]
				y95Third = str[23] & 0x0F; //перевод правого бита 9го байта
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3317      	adds	r3, #23
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	4a49      	ldr	r2, [pc, #292]	; (8000d94 <transmit+0x550>)
 8000c70:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d ", yIntSumThird, y8Third, y90Third);
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <transmit+0x544>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <transmit+0x548>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <transmit+0x54c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	460b      	mov	r3, r1
 8000c82:	493a      	ldr	r1, [pc, #232]	; (8000d6c <transmit+0x528>)
 8000c84:	4844      	ldr	r0, [pc, #272]	; (8000d98 <transmit+0x554>)
 8000c86:	f004 fc3b 	bl	8005500 <siprintf>
				if((str[21] >> 4) == 0x01)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <transmit+0x45a>
					yvalThird[0] = '-';
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <transmit+0x554>)
 8000c9a:	222d      	movs	r2, #45	; 0x2d
 8000c9c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[24] & 0x0F) * 10 + (str[25] >> 4); //целочисленная сумма Z
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 020f 	and.w	r2, r3, #15
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3319      	adds	r3, #25
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a37      	ldr	r2, [pc, #220]	; (8000d9c <transmit+0x558>)
 8000cc0:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11Third = str[25] & 0x0F; //перевод правого бита 11го байта
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3319      	adds	r3, #25
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 030f 	and.w	r3, r3, #15
 8000ccc:	4a34      	ldr	r2, [pc, #208]	; (8000da0 <transmit+0x55c>)
 8000cce:	6013      	str	r3, [r2, #0]
				z120Third = str[26] >> 4; //перевод левого бита 12го байта
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	331a      	adds	r3, #26
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <transmit+0x560>)
 8000cde:	601a      	str	r2, [r3, #0]
				z125Third = str[26] & 0x0F; //перевод правого бита 12го байта
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	331a      	adds	r3, #26
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <transmit+0x564>)
 8000cec:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d ", zIntSumThird, z11Third, z120Third);
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <transmit+0x558>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <transmit+0x55c>)
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <transmit+0x560>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	491b      	ldr	r1, [pc, #108]	; (8000d6c <transmit+0x528>)
 8000d00:	482a      	ldr	r0, [pc, #168]	; (8000dac <transmit+0x568>)
 8000d02:	f004 fbfd 	bl	8005500 <siprintf>
				if((str[24] >> 4) == 0x01)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3318      	adds	r3, #24
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d102      	bne.n	8000d1a <transmit+0x4d6>
					zvalThird[0] = '-';
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <transmit+0x568>)
 8000d16:	222d      	movs	r2, #45	; 0x2d
 8000d18:	701a      	strb	r2, [r3, #0]
//			}
//		}
		sprintf(str1, "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <transmit+0x568>)
 8000d1c:	9306      	str	r3, [sp, #24]
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <transmit+0x554>)
 8000d20:	9305      	str	r3, [sp, #20]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <transmit+0x540>)
 8000d24:	9304      	str	r3, [sp, #16]
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <transmit+0x52c>)
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <transmit+0x56c>)
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <transmit+0x570>)
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <transmit+0x574>)
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <transmit+0x578>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <transmit+0x57c>)
 8000d3a:	4922      	ldr	r1, [pc, #136]	; (8000dc4 <transmit+0x580>)
 8000d3c:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <transmit+0x584>)
 8000d3e:	f004 fbdf 	bl	8005500 <siprintf>
	HAL_UART_Abort(&huart2);
 8000d42:	4822      	ldr	r0, [pc, #136]	; (8000dcc <transmit+0x588>)
 8000d44:	f003 fc1a 	bl	800457c <HAL_UART_Abort>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 64);
 8000d48:	2240      	movs	r2, #64	; 0x40
 8000d4a:	491f      	ldr	r1, [pc, #124]	; (8000dc8 <transmit+0x584>)
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <transmit+0x588>)
 8000d4e:	f003 fbb9 	bl	80044c4 <HAL_UART_Transmit_IT>



	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	//HAL_UART_Transmit_IT(&huart3, accelSelect[accelNum], 5);
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000a8 	.word	0x200000a8
 8000d60:	20000098 	.word	0x20000098
 8000d64:	20000318 	.word	0x20000318
 8000d68:	20000124 	.word	0x20000124
 8000d6c:	08005d24 	.word	0x08005d24
 8000d70:	20000128 	.word	0x20000128
 8000d74:	20000314 	.word	0x20000314
 8000d78:	20000184 	.word	0x20000184
 8000d7c:	200000c8 	.word	0x200000c8
 8000d80:	200001a0 	.word	0x200001a0
 8000d84:	2000027c 	.word	0x2000027c
 8000d88:	20000200 	.word	0x20000200
 8000d8c:	20000130 	.word	0x20000130
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	200000c4 	.word	0x200000c4
 8000d98:	200000ac 	.word	0x200000ac
 8000d9c:	2000030c 	.word	0x2000030c
 8000da0:	200000b8 	.word	0x200000b8
 8000da4:	20000210 	.word	0x20000210
 8000da8:	200000cc 	.word	0x200000cc
 8000dac:	200001e8 	.word	0x200001e8
 8000db0:	20000198 	.word	0x20000198
 8000db4:	200000a0 	.word	0x200000a0
 8000db8:	20000208 	.word	0x20000208
 8000dbc:	200000d4 	.word	0x200000d4
 8000dc0:	200000bc 	.word	0x200000bc
 8000dc4:	08005d30 	.word	0x08005d30
 8000dc8:	200001a4 	.word	0x200001a4
 8000dcc:	20000284 	.word	0x20000284

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fc36 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f830 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f930 	bl	8001040 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de0:	f000 f910 	bl	8001004 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 f8de 	bl	8000fa4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000de8:	f000 f89e 	bl	8000f28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f001 f962 	bl	80020bc <HAL_GPIO_WritePin>
  Rf96_Lora_init();
 8000df8:	f7ff fce0 	bl	80007bc <Rf96_Lora_init>
  Rf96_Lora_RX_mode();
 8000dfc:	f7ff fd02 	bl	8000804 <Rf96_Lora_RX_mode>
	  	 		  Rf96_Lora_RX_mode();
	  	 		  //Rf96_LoRaRxPacket((char*)TX_RX_Radio);

	  	 	  }
*/
	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 f940 	bl	800208c <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f6      	beq.n	8000e00 <main+0x30>
	  	 	 {
	  	 	    //  Rf96_LoRaRxPacket((char*)TX_RX_Radio);
	  	 	   Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <main+0x64>)
 8000e14:	f7ff fcb5 	bl	8000782 <Rf96_DataRX_From_FiFO>

	  	 	  if(Get_NIRQ_Di3()) // Если CRC не совпадает
 8000e18:	2110      	movs	r1, #16
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <main+0x68>)
 8000e1c:	f001 f936 	bl	800208c <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <main+0x5c>


	  	 		}
	  	 	  else              // CRC совпало
	  	 	  {
	  	 		transmit(TX_RX_Radio);
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <main+0x64>)
 8000e28:	f7ff fd0c 	bl	8000844 <transmit>
	  	 	  }
	  	 	Rf96_LoRaClearIrq();
 8000e2c:	f7ff fba0 	bl	8000570 <Rf96_LoRaClearIrq>
	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000e30:	e7e6      	b.n	8000e00 <main+0x30>
 8000e32:	bf00      	nop
 8000e34:	200000e4 	.word	0x200000e4
 8000e38:	48000400 	.word	0x48000400

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b8      	sub	sp, #224	; 0xe0
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e46:	2244      	movs	r2, #68	; 0x44
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 fb50 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2288      	movs	r2, #136	; 0x88
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fb42 	bl	80054f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e92:	230a      	movs	r3, #10
 8000e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 f980 	bl	80021b4 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eba:	f000 f943 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000edc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fd4c 	bl	8002980 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eee:	f000 f929 	bl	8001144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 ff43 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f08:	f000 f91c 	bl	8001144 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f10:	f001 f8fa 	bl	8002108 <HAL_PWREx_ControlVoltageScaling>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000f1a:	f000 f913 	bl	8001144 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	37e0      	adds	r7, #224	; 0xe0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_SPI1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f88:	f002 fbae 	bl	80036e8 <HAL_SPI_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f000 f8d7 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000214 	.word	0x20000214
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <MX_USART2_UART_Init+0x5c>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe8:	f003 fa1e 	bl	8004428 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ff2:	f000 f8a7 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000284 	.word	0x20000284
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <MX_DMA_Init+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6493      	str	r3, [r2, #72]	; 0x48
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_DMA_Init+0x38>)
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2011      	movs	r0, #17
 8001028:	f000 fc5f 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800102c:	2011      	movs	r0, #17
 800102e:	f000 fc78 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <MX_GPIO_Init+0xf4>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_GPIO_Init+0xf4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <MX_GPIO_Init+0xf4>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_GPIO_Init+0xf4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_GPIO_Init+0xf4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <MX_GPIO_Init+0xf4>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_GPIO_Init+0xf4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <MX_GPIO_Init+0xf8>)
 80010bc:	f000 fffe 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_GPIO_Init+0xfc>)
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <MX_GPIO_Init+0x100>)
 80010d6:	f000 fe31 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80010da:	f240 4301 	movw	r3, #1025	; 0x401
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f000 fe23 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010f6:	2338      	movs	r3, #56	; 0x38
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0xf8>)
 800110a:	f000 fe17 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0xf8>)
 8001126:	f000 fe09 	bl	8001d3c <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	48000400 	.word	0x48000400
 800113c:	10210000 	.word	0x10210000
 8001140:	48000800 	.word	0x48000800

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800115e:	1df9      	adds	r1, r7, #7
 8001160:	230a      	movs	r3, #10
 8001162:	2201      	movs	r2, #1
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <SPICmd8bit+0x20>)
 8001166:	f002 fb49 	bl	80037fc <HAL_SPI_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000214 	.word	0x20000214

08001178 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001182:	1df9      	adds	r1, r7, #7
 8001184:	230a      	movs	r3, #10
 8001186:	2201      	movs	r2, #1
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <SPIRead8bit+0x20>)
 800118a:	f002 fc9d 	bl	8003ac8 <HAL_SPI_Receive>

  return(RdPara);
 800118e:	79fb      	ldrb	r3, [r7, #7]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000214 	.word	0x20000214

0800119c <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <SPIRead+0x38>)
 80011ac:	f000 ff86 	bl	80020bc <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffce 	bl	8001154 <SPICmd8bit>
  tmp = SPIRead8bit();
 80011b8:	f7ff ffde 	bl	8001178 <SPIRead8bit>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <SPIRead+0x38>)
 80011c6:	f000 ff79 	bl	80020bc <HAL_GPIO_WritePin>
  return(tmp);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	48000400 	.word	0x48000400

080011d8 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80011e8:	2200      	movs	r2, #0
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <SPIWrite+0x44>)
 80011ee:	f000 ff65 	bl	80020bc <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ffaa 	bl	8001154 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffa6 	bl	8001154 <SPICmd8bit>
	NSS_H();
 8001208:	2201      	movs	r2, #1
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPIWrite+0x44>)
 800120e:	f000 ff55 	bl	80020bc <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	48000400 	.word	0x48000400

08001220 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d91f      	bls.n	8001276 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4811      	ldr	r0, [pc, #68]	; (8001280 <SPIBurstRead+0x60>)
 800123c:	f000 ff3e 	bl	80020bc <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff86 	bl	8001154 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e009      	b.n	8001262 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	18d4      	adds	r4, r2, r3
 8001254:	f7ff ff90 	bl	8001178 <SPIRead8bit>
 8001258:	4603      	mov	r3, r0
 800125a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3f1      	bcc.n	800124e <SPIBurstRead+0x2e>
      NSS_H();
 800126a:	2201      	movs	r2, #1
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <SPIBurstRead+0x60>)
 8001270:	f000 ff24 	bl	80020bc <HAL_GPIO_WritePin>
 8001274:	e000      	b.n	8001278 <SPIBurstRead+0x58>
    return;
 8001276:	bf00      	nop
  }
}
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	48000400 	.word	0x48000400

08001284 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d922      	bls.n	80012e0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 800129a:	2200      	movs	r2, #0
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <BurstWrite+0x64>)
 80012a0:	f000 ff0c 	bl	80020bc <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff51 	bl	8001154 <SPICmd8bit>
    for(i=0;i<length;i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e009      	b.n	80012cc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff47 	bl	8001154 <SPICmd8bit>
    for(i=0;i<length;i++)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	3301      	adds	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f1      	bcc.n	80012b8 <BurstWrite+0x34>
    NSS_H();
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <BurstWrite+0x64>)
 80012da:	f000 feef 	bl	80020bc <HAL_GPIO_WritePin>
 80012de:	e000      	b.n	80012e2 <BurstWrite+0x5e>
    return;
 80012e0:	bf00      	nop
  }
}
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	48000400 	.word	0x48000400

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_SPI_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 800135c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001360:	6613      	str	r3, [r2, #96]	; 0x60
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_SPI_MspInit+0x80>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001386:	23e0      	movs	r3, #224	; 0xe0
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f000 fcca 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013000 	.word	0x40013000
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_UART_MspInit+0xe0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d159      	bne.n	800148e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_UART_MspInit+0xe4>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_UART_MspInit+0xe4>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_UART_MspInit+0xe4>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_UART_MspInit+0xe4>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <HAL_UART_MspInit+0xe4>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_UART_MspInit+0xe4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140a:	230c      	movs	r3, #12
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141a:	2307      	movs	r3, #7
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f000 fc88 	bl	8001d3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_UART_MspInit+0xec>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001434:	2202      	movs	r2, #2
 8001436:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 800143a:	2210      	movs	r2, #16
 800143c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001464:	f000 fa78 	bl	8001958 <HAL_DMA_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800146e:	f7ff fe69 	bl	8001144 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 8001476:	669a      	str	r2, [r3, #104]	; 0x68
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_UART_MspInit+0xe8>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2026      	movs	r0, #38	; 0x26
 8001484:	f000 fa31 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001488:	2026      	movs	r0, #38	; 0x26
 800148a:	f000 fa4a 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000
 80014a0:	2000013c 	.word	0x2000013c
 80014a4:	40020080 	.word	0x40020080

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f8fc 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA1_Channel7_IRQHandler+0x10>)
 800150a:	f000 fb5c 	bl	8001bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000013c 	.word	0x2000013c

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f003 f8bd 	bl	800469c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000284 	.word	0x20000284

0800152c <_sbrk>:
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x50>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x16>
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <_sbrk+0x50>)
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <_sbrk+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <_sbrk+0x50>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <_sbrk+0x50>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	466a      	mov	r2, sp
 8001552:	4293      	cmp	r3, r2
 8001554:	d907      	bls.n	8001566 <_sbrk+0x3a>
 8001556:	f003 ffa1 	bl	800549c <__errno>
 800155a:	4602      	mov	r2, r0
 800155c:	230c      	movs	r3, #12
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001564:	e006      	b.n	8001574 <_sbrk+0x48>
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <_sbrk+0x50>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	; (800157c <_sbrk+0x50>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000008c 	.word	0x2000008c
 8001580:	20000328 	.word	0x20000328

08001584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <SystemInit+0x64>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <SystemInit+0x64>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <SystemInit+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <SystemInit+0x68>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <SystemInit+0x68>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <SystemInit+0x68>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <SystemInit+0x68>)
 80015b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <SystemInit+0x68>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <SystemInit+0x68>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <SystemInit+0x68>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <SystemInit+0x68>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SystemInit+0x64>)
 80015d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015da:	609a      	str	r2, [r3, #8]
#endif
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	40021000 	.word	0x40021000

080015f0 <Reset_Handler>:
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopForever+0x2>
 80015f4:	2100      	movs	r1, #0
 80015f6:	e003      	b.n	8001600 <LoopCopyDataInit>

080015f8 <CopyDataInit>:
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <LoopForever+0x6>)
 80015fa:	585b      	ldr	r3, [r3, r1]
 80015fc:	5043      	str	r3, [r0, r1]
 80015fe:	3104      	adds	r1, #4

08001600 <LoopCopyDataInit>:
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <LoopForever+0xa>)
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <LoopForever+0xe>)
 8001604:	1842      	adds	r2, r0, r1
 8001606:	429a      	cmp	r2, r3
 8001608:	d3f6      	bcc.n	80015f8 <CopyDataInit>
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopForever+0x12>)
 800160c:	e002      	b.n	8001614 <LoopFillZerobss>

0800160e <FillZerobss>:
 800160e:	2300      	movs	r3, #0
 8001610:	f842 3b04 	str.w	r3, [r2], #4

08001614 <LoopFillZerobss>:
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <LoopForever+0x16>)
 8001616:	429a      	cmp	r2, r3
 8001618:	d3f9      	bcc.n	800160e <FillZerobss>
 800161a:	f7ff ffb3 	bl	8001584 <SystemInit>
 800161e:	f003 ff43 	bl	80054a8 <__libc_init_array>
 8001622:	f7ff fbd5 	bl	8000dd0 <main>

08001626 <LoopForever>:
 8001626:	e7fe      	b.n	8001626 <LoopForever>
 8001628:	20018000 	.word	0x20018000
 800162c:	08005de8 	.word	0x08005de8
 8001630:	20000000 	.word	0x20000000
 8001634:	20000070 	.word	0x20000070
 8001638:	20000070 	.word	0x20000070
 800163c:	20000324 	.word	0x20000324

08001640 <ADC1_2_IRQHandler>:
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_Init+0x3c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_Init+0x3c>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f93a 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001660:	2000      	movs	r0, #0
 8001662:	f000 f80f 	bl	8001684 <HAL_InitTick>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	e001      	b.n	8001676 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001672:	f7ff fe3b 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001676:	79fb      	ldrb	r3, [r7, #7]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_InitTick+0x68>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d022      	beq.n	80016de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_InitTick+0x6c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_InitTick+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f946 	bl	800193e <HAL_SYSTICK_Config>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	d809      	bhi.n	80016d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016be:	2200      	movs	r2, #0
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c6:	f000 f910 	bl	80018ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_InitTick+0x70>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e004      	b.n	80016e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x1c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x20>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x1c>)
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	2000031c 	.word	0x2000031c
 8001718:	20000008 	.word	0x20000008

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000031c 	.word	0x2000031c

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e098      	b.n	8001a9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_DMA_Init+0x150>)
 8001972:	429a      	cmp	r2, r3
 8001974:	d80f      	bhi.n	8001996 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_DMA_Init+0x154>)
 800197e:	4413      	add	r3, r2
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_DMA_Init+0x158>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_DMA_Init+0x15c>)
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
 8001994:	e00e      	b.n	80019b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <HAL_DMA_Init+0x160>)
 800199e:	4413      	add	r3, r2
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_DMA_Init+0x158>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	009a      	lsls	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <HAL_DMA_Init+0x164>)
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a0e:	d039      	beq.n	8001a84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_DMA_Init+0x15c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11a      	bne.n	8001a50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_DMA_Init+0x168>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f003 031c 	and.w	r3, r3, #28
 8001a26:	210f      	movs	r1, #15
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4924      	ldr	r1, [pc, #144]	; (8001ac0 <HAL_DMA_Init+0x168>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_DMA_Init+0x168>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f003 031c 	and.w	r3, r3, #28
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	491d      	ldr	r1, [pc, #116]	; (8001ac0 <HAL_DMA_Init+0x168>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
 8001a4e:	e019      	b.n	8001a84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_DMA_Init+0x16c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <HAL_DMA_Init+0x16c>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_DMA_Init+0x16c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 031c 	and.w	r3, r3, #28
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	4911      	ldr	r1, [pc, #68]	; (8001ac4 <HAL_DMA_Init+0x16c>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40020407 	.word	0x40020407
 8001aac:	bffdfff8 	.word	0xbffdfff8
 8001ab0:	cccccccd 	.word	0xcccccccd
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	bffdfbf8 	.word	0xbffdfbf8
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	400200a8 	.word	0x400200a8
 8001ac4:	400204a8 	.word	0x400204a8

08001ac8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e022      	b.n	8001b38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 020e 	bic.w	r2, r2, #14
 8001b00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f003 021c 	and.w	r2, r3, #28
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d005      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e029      	b.n	8001bbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020e 	bic.w	r2, r2, #14
 8001b76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f003 021c 	and.w	r2, r3, #28
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
    }
  }
  return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 031c 	and.w	r3, r3, #28
 8001be6:	2204      	movs	r2, #4
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d026      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x7a>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d021      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0204 	bic.w	r2, r2, #4
 8001c18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f003 021c 	and.w	r2, r3, #28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2104      	movs	r1, #4
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d071      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	e06c      	b.n	8001d1a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f003 031c 	and.w	r3, r3, #28
 8001c48:	2202      	movs	r2, #2
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d02e      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0xec>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d029      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020a 	bic.w	r2, r2, #10
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f003 021c 	and.w	r2, r3, #28
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	2102      	movs	r1, #2
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d038      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cb0:	e033      	b.n	8001d1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 031c 	and.w	r3, r3, #28
 8001cba:	2208      	movs	r2, #8
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02a      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x156>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d025      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 020e 	bic.w	r2, r2, #14
 8001cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f003 021c 	and.w	r2, r3, #28
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
}
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e17f      	b.n	800204c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8171 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d00b      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b12      	cmp	r3, #18
 8001d82:	d130      	bne.n	8001de6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 0201 	and.w	r2, r3, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d118      	bne.n	8001e24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x128>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ac 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f06:	4a59      	ldr	r2, [pc, #356]	; (800206c <HAL_GPIO_Init+0x330>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x242>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x23e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x338>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x23a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x33c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x236>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4b      	ldr	r2, [pc, #300]	; (800207c <HAL_GPIO_Init+0x340>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x232>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <HAL_GPIO_Init+0x344>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a49      	ldr	r2, [pc, #292]	; (8002084 <HAL_GPIO_Init+0x348>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x22a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f90:	4936      	ldr	r1, [pc, #216]	; (800206c <HAL_GPIO_Init+0x330>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fc2:	4a31      	ldr	r2, [pc, #196]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002016:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_GPIO_Init+0x34c>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae78 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	48000400 	.word	0x48000400
 8002074:	48000800 	.word	0x48000800
 8002078:	48000c00 	.word	0x48000c00
 800207c:	48001000 	.word	0x48001000
 8002080:	48001400 	.word	0x48001400
 8002084:	48001800 	.word	0x48001800
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_PWREx_GetVoltageRange+0x18>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000

08002108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002116:	d130      	bne.n	800217a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d038      	beq.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2232      	movs	r2, #50	; 0x32
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	3301      	adds	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214c:	e002      	b.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b01      	subs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002160:	d102      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f2      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002174:	d110      	bne.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e00f      	b.n	800219a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002186:	d007      	beq.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002190:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002196:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e3d4      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4ba1      	ldr	r3, [pc, #644]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b9e      	ldr	r3, [pc, #632]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80e4 	beq.w	80023b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_RCC_OscConfig+0x4a>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	f040 808b 	bne.w	800230c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8087 	bne.w	800230c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021fe:	4b93      	ldr	r3, [pc, #588]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ac      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_RCC_OscConfig+0x7c>
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222e:	e005      	b.n	800223c <HAL_RCC_OscConfig+0x88>
 8002230:	4b86      	ldr	r3, [pc, #536]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223c:	4293      	cmp	r3, r2
 800223e:	d223      	bcs.n	8002288 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fd3f 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e38d      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7c      	ldr	r2, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4977      	ldr	r1, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	4972      	ldr	r1, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
 8002286:	e025      	b.n	80022d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6f      	ldr	r2, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	496a      	ldr	r1, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	4965      	ldr	r1, [pc, #404]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fcff 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e34d      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d4:	f000 fc36 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80022d8:	4601      	mov	r1, r0
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa21 f303 	lsr.w	r3, r1, r3
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_OscConfig+0x2a0>)
 80022f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x2a4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f9c3 	bl	8001684 <HAL_InitTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d052      	beq.n	80023ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	e331      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d032      	beq.n	800237a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002320:	f7ff f9fc 	bl	800171c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002328:	f7ff f9f8 	bl	800171c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e31a      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233a:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a40      	ldr	r2, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	493b      	ldr	r1, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4936      	ldr	r1, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	e01a      	b.n	80023b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002386:	f7ff f9c9 	bl	800171c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238e:	f7ff f9c5 	bl	800171c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e2e7      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x1da>
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d074      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x21a>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d10e      	bne.n	80023e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d10b      	bne.n	80023e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d064      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d160      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e2c4      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x24a>
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_RCC_OscConfig+0x298>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e01d      	b.n	800243a <HAL_RCC_OscConfig+0x286>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x26e>
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800240e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x298>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x286>
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x298>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01c      	beq.n	800247c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7ff f96b 	bl	800171c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002448:	e011      	b.n	800246e <HAL_RCC_OscConfig+0x2ba>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	08005d5c 	.word	0x08005d5c
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff f95e 	bl	800171c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e280      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	4baf      	ldr	r3, [pc, #700]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x2a8>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff f94e 	bl	800171c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff f94a 	bl	800171c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e26c      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002496:	4ba5      	ldr	r3, [pc, #660]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x2d0>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d060      	beq.n	8002574 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_OscConfig+0x310>
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d119      	bne.n	80024f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d116      	bne.n	80024f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	4b99      	ldr	r3, [pc, #612]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x328>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e249      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	4990      	ldr	r1, [pc, #576]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f0:	e040      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d023      	beq.n	8002542 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fa:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a8b      	ldr	r2, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7ff f909 	bl	800171c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250e:	f7ff f905 	bl	800171c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e227      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002520:	4b82      	ldr	r3, [pc, #520]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b7f      	ldr	r3, [pc, #508]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	497c      	ldr	r1, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e018      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a79      	ldr	r2, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7ff f8e5 	bl	800171c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff f8e1 	bl	800171c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e203      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d03c      	beq.n	80025fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	4a67      	ldr	r2, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7ff f8c0 	bl	800171c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff f8bc 	bl	800171c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1de      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b2:	4b5e      	ldr	r3, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80025b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ef      	beq.n	80025a0 <HAL_RCC_OscConfig+0x3ec>
 80025c0:	e01b      	b.n	80025fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7ff f8a3 	bl	800171c <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025da:	f7ff f89f 	bl	800171c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1c1      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ec:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ef      	bne.n	80025da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80a6 	beq.w	8002754 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800260c:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b44      	ldr	r3, [pc, #272]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a43      	ldr	r2, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x57c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d118      	bne.n	8002672 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x57c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_RCC_OscConfig+0x57c>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264c:	f7ff f866 	bl	800171c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7ff f862 	bl	800171c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e184      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_RCC_OscConfig+0x57c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x4d8>
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	4a2a      	ldr	r2, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268a:	e024      	b.n	80026d6 <HAL_RCC_OscConfig+0x522>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d110      	bne.n	80026b6 <HAL_RCC_OscConfig+0x502>
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_OscConfig+0x578>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x578>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b4:	e00f      	b.n	80026d6 <HAL_RCC_OscConfig+0x522>
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff f81d 	bl	800171c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7ff f819 	bl	800171c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e139      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0ed      	beq.n	80026e6 <HAL_RCC_OscConfig+0x532>
 800270a:	e01a      	b.n	8002742 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff f806 	bl	800171c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002712:	e00f      	b.n	8002734 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7ff f802 	bl	800171c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d906      	bls.n	8002734 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e122      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002734:	4b90      	ldr	r3, [pc, #576]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e8      	bne.n	8002714 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b8b      	ldr	r3, [pc, #556]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	4a8a      	ldr	r2, [pc, #552]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8108 	beq.w	800296e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b02      	cmp	r3, #2
 8002764:	f040 80d0 	bne.w	8002908 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002768:	4b83      	ldr	r3, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	429a      	cmp	r2, r3
 800277a:	d130      	bne.n	80027de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	3b01      	subs	r3, #1
 8002788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d127      	bne.n	80027de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11f      	bne.n	80027de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a8:	2a07      	cmp	r2, #7
 80027aa:	bf14      	ite	ne
 80027ac:	2201      	movne	r2, #1
 80027ae:	2200      	moveq	r2, #0
 80027b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d113      	bne.n	80027de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d109      	bne.n	80027de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d06e      	beq.n	80028bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d069      	beq.n	80028b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027f0:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b7      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002800:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800280c:	f7fe ff86 	bl	800171c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ff82 	bl	800171c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0a4      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002826:	4b54      	ldr	r3, [pc, #336]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002832:	4b51      	ldr	r3, [pc, #324]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCC_OscConfig+0x7c8>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002842:	3a01      	subs	r2, #1
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800284c:	0212      	lsls	r2, r2, #8
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002854:	0852      	lsrs	r2, r2, #1
 8002856:	3a01      	subs	r2, #1
 8002858:	0552      	lsls	r2, r2, #21
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002860:	0852      	lsrs	r2, r2, #1
 8002862:	3a01      	subs	r2, #1
 8002864:	0652      	lsls	r2, r2, #25
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	0912      	lsrs	r2, r2, #4
 800286e:	0452      	lsls	r2, r2, #17
 8002870:	430a      	orrs	r2, r1
 8002872:	4941      	ldr	r1, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002890:	f7fe ff44 	bl	800171c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe ff40 	bl	800171c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e062      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b6:	e05a      	b.n	800296e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e059      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d152      	bne.n	800296e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e0:	f7fe ff1c 	bl	800171c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe ff18 	bl	800171c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e03a      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x734>
 8002906:	e032      	b.n	800296e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d02d      	beq.n	800296a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002918:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800292c:	f023 0303 	bic.w	r3, r3, #3
 8002930:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 8002938:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800293c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002940:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe feeb 	bl	800171c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fee7 	bl	800171c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e009      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x7c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x796>
 8002968:	e001      	b.n	800296e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	f99d808c 	.word	0xf99d808c

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0c8      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4961      	ldr	r1, [pc, #388]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b5f      	ldr	r3, [pc, #380]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b0      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d04c      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d8:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e09e      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d115      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e092      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e086      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e07e      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 0203 	bic.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	493f      	ldr	r1, [pc, #252]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fe6f 	bl	800171c <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a42:	f7fe fe6b 	bl	800171c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e066      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 020c 	and.w	r2, r3, #12
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d1eb      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	492c      	ldr	r1, [pc, #176]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d210      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 0207 	bic.w	r2, r3, #7
 8002a9e:	4924      	ldr	r1, [pc, #144]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_RCC_ClockConfig+0x1b0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e036      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4918      	ldr	r1, [pc, #96]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4910      	ldr	r1, [pc, #64]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af6:	f000 f825 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002afa:	4601      	mov	r1, r0
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_ClockConfig+0x1b4>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fdb2 	bl	8001684 <HAL_InitTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08005d5c 	.word	0x08005d5c
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d121      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d11e      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ba0:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e004      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d133      	bne.n	8002c3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0xaa>
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bea:	617b      	str	r3, [r7, #20]
      break;
 8002bec:	e005      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bf0:	617b      	str	r3, [r7, #20]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	617b      	str	r3, [r7, #20]
      break;
 8002bf8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	3301      	adds	r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	fb02 f203 	mul.w	r2, r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0e5b      	lsrs	r3, r3, #25
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3724      	adds	r7, #36	; 0x24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08005d74 	.word	0x08005d74
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08005d6c 	.word	0x08005d6c

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca0:	f7ff ffda 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08005d6c 	.word	0x08005d6c

08002cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce0:	f7ff fa04 	bl	80020ec <HAL_PWREx_GetVoltageRange>
 8002ce4:	6178      	str	r0, [r7, #20]
 8002ce6:	e014      	b.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f9f4 	bl	80020ec <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d18:	d10b      	bne.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d919      	bls.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2ba0      	cmp	r3, #160	; 0xa0
 8002d24:	d902      	bls.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d26:	2302      	movs	r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e013      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e010      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d902      	bls.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d38:	2303      	movs	r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e00a      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d102      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e004      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b70      	cmp	r3, #112	; 0x70
 8002d4e:	d101      	bne.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4909      	ldr	r1, [pc, #36]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40022000 	.word	0x40022000

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03f      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dac:	d01c      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d802      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002db8:	e01f      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc4:	d01c      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002dc6:	e018      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc8:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a84      	ldr	r2, [pc, #528]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd4:	e015      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fab9 	bl	8003354 <RCCEx_PLLSAI1_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de6:	e00c      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3320      	adds	r3, #32
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fba0 	bl	8003534 <RCCEx_PLLSAI2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dfe:	e000      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e16:	4972      	ldr	r1, [pc, #456]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e1e:	e001      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e38:	d01c      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3e:	d802      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e44:	e01f      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e50:	d01c      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e52:	e018      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e54:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a61      	ldr	r2, [pc, #388]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e60:	e015      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fa73 	bl	8003354 <RCCEx_PLLSAI1_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e72:	e00c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3320      	adds	r3, #32
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fb5a 	bl	8003534 <RCCEx_PLLSAI2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	74fb      	strb	r3, [r7, #19]
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e94:	4b52      	ldr	r3, [pc, #328]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	494f      	ldr	r1, [pc, #316]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a0 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee4:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f00:	f7fe fc0c 	bl	800171c <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f06:	e009      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe fc08 	bl	800171c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	74fb      	strb	r3, [r7, #19]
        break;
 8002f1a:	e005      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d15c      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01f      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d019      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fbc7 	bl	800171c <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f90:	e00b      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fbc3 	bl	800171c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	74fb      	strb	r3, [r7, #19]
            break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ec      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fd6:	e009      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
 8002fdc:	e006      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fec:	7c7b      	ldrb	r3, [r7, #17]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b9e      	ldr	r3, [pc, #632]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a9d      	ldr	r2, [pc, #628]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300a:	4b98      	ldr	r3, [pc, #608]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f023 0203 	bic.w	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	4994      	ldr	r1, [pc, #592]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f023 020c 	bic.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	498c      	ldr	r1, [pc, #560]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304e:	4b87      	ldr	r3, [pc, #540]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4983      	ldr	r1, [pc, #524]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003070:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	497b      	ldr	r1, [pc, #492]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003092:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a0:	4972      	ldr	r1, [pc, #456]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b4:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	496a      	ldr	r1, [pc, #424]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	4961      	ldr	r1, [pc, #388]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f8:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	4959      	ldr	r1, [pc, #356]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	4950      	ldr	r1, [pc, #320]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800313c:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4948      	ldr	r1, [pc, #288]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	493f      	ldr	r1, [pc, #252]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d028      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318e:	4937      	ldr	r1, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319e:	d106      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a31      	ldr	r2, [pc, #196]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031aa:	60d3      	str	r3, [r2, #12]
 80031ac:	e011      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f8c8 	bl	8003354 <RCCEx_PLLSAI1_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d028      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031de:	4b23      	ldr	r3, [pc, #140]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	491f      	ldr	r1, [pc, #124]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fc:	d106      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003208:	60d3      	str	r3, [r2, #12]
 800320a:	e011      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f899 	bl	8003354 <RCCEx_PLLSAI1_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02b      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325a:	d109      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a02      	ldr	r2, [pc, #8]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003266:	60d3      	str	r3, [r2, #12]
 8003268:	e014      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f867 	bl	8003354 <RCCEx_PLLSAI1_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ae:	4928      	ldr	r1, [pc, #160]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f844 	bl	8003354 <RCCEx_PLLSAI1_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
 80032da:	e011      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3320      	adds	r3, #32
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f921 	bl	8003534 <RCCEx_PLLSAI2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331a:	490d      	ldr	r1, [pc, #52]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	4904      	ldr	r1, [pc, #16]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003346:	7cbb      	ldrb	r3, [r7, #18]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003362:	4b73      	ldr	r3, [pc, #460]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d018      	beq.n	80033a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0203 	and.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d10d      	bne.n	800339a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
       ||
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003386:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
       ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d044      	beq.n	8003424 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	e041      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d00c      	beq.n	80033c2 <RCCEx_PLLSAI1_Config+0x6e>
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d013      	beq.n	80033d4 <RCCEx_PLLSAI1_Config+0x80>
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d120      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033b0:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d11d      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e01a      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033c2:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d2:	e013      	b.n	80033fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033f0:	e006      	b.n	8003400 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      break;
 80033f6:	e004      	b.n	8003402 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033f8:	bf00      	nop
 80033fa:	e002      	b.n	8003402 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003400:	bf00      	nop
    }

    if(status == HAL_OK)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	3b01      	subs	r3, #1
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	430b      	orrs	r3, r1
 800341e:	4944      	ldr	r1, [pc, #272]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d17d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a40      	ldr	r2, [pc, #256]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003436:	f7fe f971 	bl	800171c <HAL_GetTick>
 800343a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800343c:	e009      	b.n	8003452 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800343e:	f7fe f96d 	bl	800171c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d902      	bls.n	8003452 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	73fb      	strb	r3, [r7, #15]
        break;
 8003450:	e005      	b.n	800345e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ef      	bne.n	800343e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d160      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d111      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	0211      	lsls	r1, r2, #8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68d2      	ldr	r2, [r2, #12]
 8003480:	0912      	lsrs	r2, r2, #4
 8003482:	0452      	lsls	r2, r2, #17
 8003484:	430a      	orrs	r2, r1
 8003486:	492a      	ldr	r1, [pc, #168]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]
 800348c:	e027      	b.n	80034de <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d112      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800349c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	0211      	lsls	r1, r2, #8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6912      	ldr	r2, [r2, #16]
 80034aa:	0852      	lsrs	r2, r2, #1
 80034ac:	3a01      	subs	r2, #1
 80034ae:	0552      	lsls	r2, r2, #21
 80034b0:	430a      	orrs	r2, r1
 80034b2:	491f      	ldr	r1, [pc, #124]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
 80034b8:	e011      	b.n	80034de <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	0211      	lsls	r1, r2, #8
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6952      	ldr	r2, [r2, #20]
 80034d0:	0852      	lsrs	r2, r2, #1
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0652      	lsls	r2, r2, #25
 80034d6:	430a      	orrs	r2, r1
 80034d8:	4915      	ldr	r1, [pc, #84]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe f917 	bl	800171c <HAL_GetTick>
 80034ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f0:	e009      	b.n	8003506 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f2:	f7fe f913 	bl	800171c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d902      	bls.n	8003506 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	73fb      	strb	r3, [r7, #15]
          break;
 8003504:	e005      	b.n	8003512 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ef      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d106      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4903      	ldr	r1, [pc, #12]	; (8003530 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000

08003534 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003542:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0203 	and.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d10d      	bne.n	800357a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
       ||
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
       ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d044      	beq.n	8003604 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	e041      	b.n	8003604 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d00c      	beq.n	80035a2 <RCCEx_PLLSAI2_Config+0x6e>
 8003588:	2b03      	cmp	r3, #3
 800358a:	d013      	beq.n	80035b4 <RCCEx_PLLSAI2_Config+0x80>
 800358c:	2b01      	cmp	r3, #1
 800358e:	d120      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003590:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d11d      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a0:	e01a      	b.n	80035d8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b2:	e013      	b.n	80035dc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035c0:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035d0:	e006      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      break;
 80035d6:	e004      	b.n	80035e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	430b      	orrs	r3, r1
 80035fe:	4939      	ldr	r1, [pc, #228]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d167      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a35      	ldr	r2, [pc, #212]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003616:	f7fe f881 	bl	800171c <HAL_GetTick>
 800361a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800361c:	e009      	b.n	8003632 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800361e:	f7fe f87d 	bl	800171c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d902      	bls.n	8003632 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	73fb      	strb	r3, [r7, #15]
        break;
 8003630:	e005      	b.n	800363e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d14a      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d111      	bne.n	800366e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	0211      	lsls	r1, r2, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68d2      	ldr	r2, [r2, #12]
 8003660:	0912      	lsrs	r2, r2, #4
 8003662:	0452      	lsls	r2, r2, #17
 8003664:	430a      	orrs	r2, r1
 8003666:	491f      	ldr	r1, [pc, #124]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	614b      	str	r3, [r1, #20]
 800366c:	e011      	b.n	8003692 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003676:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	0211      	lsls	r1, r2, #8
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6912      	ldr	r2, [r2, #16]
 8003684:	0852      	lsrs	r2, r2, #1
 8003686:	3a01      	subs	r2, #1
 8003688:	0652      	lsls	r2, r2, #25
 800368a:	430a      	orrs	r2, r1
 800368c:	4915      	ldr	r1, [pc, #84]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369e:	f7fe f83d 	bl	800171c <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036a4:	e009      	b.n	80036ba <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a6:	f7fe f839 	bl	800171c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d902      	bls.n	80036ba <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	73fb      	strb	r3, [r7, #15]
          break;
 80036b8:	e005      	b.n	80036c6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ef      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000

080036e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07c      	b.n	80037f4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fd fe0d 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800373a:	d902      	bls.n	8003742 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e002      	b.n	8003748 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003750:	d007      	beq.n	8003762 <HAL_SPI_Init+0x7a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003772:	d903      	bls.n	800377c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	e002      	b.n	8003782 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	ea42 0103 	orr.w	r1, r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0204 	and.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	ea42 0103 	orr.w	r1, r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_SPI_Transmit+0x22>
 800381a:	2302      	movs	r3, #2
 800381c:	e150      	b.n	8003ac0 <HAL_SPI_Transmit+0x2c4>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003826:	f7fd ff79 	bl	800171c <HAL_GetTick>
 800382a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d002      	beq.n	8003842 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003840:	e135      	b.n	8003aae <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Transmit+0x52>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003852:	e12c      	b.n	8003aae <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2203      	movs	r2, #3
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389e:	d107      	bne.n	80038b0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d007      	beq.n	80038ce <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d6:	d94b      	bls.n	8003970 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_SPI_Transmit+0xea>
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d13e      	bne.n	8003964 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800390a:	e02b      	b.n	8003964 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d112      	bne.n	8003940 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	1c9a      	adds	r2, r3, #2
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800393e:	e011      	b.n	8003964 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003940:	f7fd feec 	bl	800171c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d803      	bhi.n	8003958 <HAL_SPI_Transmit+0x15c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003956:	d102      	bne.n	800395e <HAL_SPI_Transmit+0x162>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003962:	e0a4      	b.n	8003aae <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ce      	bne.n	800390c <HAL_SPI_Transmit+0x110>
 800396e:	e07c      	b.n	8003a6a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_SPI_Transmit+0x182>
 8003978:	8afb      	ldrh	r3, [r7, #22]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d170      	bne.n	8003a60 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d912      	bls.n	80039ae <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b02      	subs	r3, #2
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ac:	e058      	b.n	8003a60 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039d4:	e044      	b.n	8003a60 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d12b      	bne.n	8003a3c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d912      	bls.n	8003a14 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b02      	subs	r3, #2
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a12:	e025      	b.n	8003a60 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a3a:	e011      	b.n	8003a60 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3c:	f7fd fe6e 	bl	800171c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d803      	bhi.n	8003a54 <HAL_SPI_Transmit+0x258>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a52:	d102      	bne.n	8003a5a <HAL_SPI_Transmit+0x25e>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a5e:	e026      	b.n	8003aae <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1b5      	bne.n	80039d6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fc94 	bl	800439c <SPI_EndRxTxTransaction>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e000      	b.n	8003aae <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae4:	d112      	bne.n	8003b0c <HAL_SPI_Receive+0x44>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10e      	bne.n	8003b0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f908 	bl	8003d18 <HAL_SPI_TransmitReceive>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	e101      	b.n	8003d10 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_Receive+0x52>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e0fa      	b.n	8003d10 <HAL_SPI_Receive+0x248>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b22:	f7fd fdfb 	bl	800171c <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b38:	e0e1      	b.n	8003cfe <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_SPI_Receive+0x7e>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b4a:	e0d8      	b.n	8003cfe <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b96:	d908      	bls.n	8003baa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e007      	b.n	8003bba <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d107      	bne.n	8003bd4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d007      	beq.n	8003bf2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bfa:	d867      	bhi.n	8003ccc <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bfc:	e030      	b.n	8003c60 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d117      	bne.n	8003c3c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f103 020c 	add.w	r2, r3, #12
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c3a:	e011      	b.n	8003c60 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fd fd6e 	bl	800171c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d803      	bhi.n	8003c54 <HAL_SPI_Receive+0x18c>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Receive+0x192>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c5e:	e04e      	b.n	8003cfe <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1c8      	bne.n	8003bfe <HAL_SPI_Receive+0x136>
 8003c6c:	e034      	b.n	8003cd8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d115      	bne.n	8003ca8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	b292      	uxth	r2, r2
 8003c88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ca6:	e011      	b.n	8003ccc <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca8:	f7fd fd38 	bl	800171c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d803      	bhi.n	8003cc0 <HAL_SPI_Receive+0x1f8>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	d102      	bne.n	8003cc6 <HAL_SPI_Receive+0x1fe>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cca:	e018      	b.n	8003cfe <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ca      	bne.n	8003c6e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fb05 	bl	80042ec <SPI_EndRxTransaction>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	e000      	b.n	8003cfe <HAL_SPI_Receive+0x236>
  }

error :
 8003cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d26:	2301      	movs	r3, #1
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x26>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e1fb      	b.n	8004136 <HAL_SPI_TransmitReceive+0x41e>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d46:	f7fd fce9 	bl	800171c <HAL_GetTick>
 8003d4a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d52:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d62:	7efb      	ldrb	r3, [r7, #27]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d00e      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x6e>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d106      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x66>
 8003d78:	7efb      	ldrb	r3, [r7, #27]
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d003      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d84:	e1cd      	b.n	8004122 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x80>
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d9e:	e1c0      	b.n	8004122 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d003      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2205      	movs	r2, #5
 8003db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df6:	d802      	bhi.n	8003dfe <HAL_SPI_TransmitReceive+0xe6>
 8003df8:	8a3b      	ldrh	r3, [r7, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d908      	bls.n	8003e10 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	e007      	b.n	8003e20 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d007      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e46:	d97c      	bls.n	8003f42 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x13e>
 8003e50:	8a7b      	ldrh	r3, [r7, #18]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d169      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7a:	e056      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d11b      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x1aa>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d016      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x1aa>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d113      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d11c      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x1f2>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f0a:	f7fd fc07 	bl	800171c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d807      	bhi.n	8003f2a <HAL_SPI_TransmitReceive+0x212>
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f20:	d003      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f28:	e0fb      	b.n	8004122 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1a3      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x164>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d19d      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x164>
 8003f40:	e0df      	b.n	8004102 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x23a>
 8003f4a:	8a7b      	ldrh	r3, [r7, #18]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 80cb 	bne.w	80040e8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d912      	bls.n	8003f82 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b02      	subs	r3, #2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f80:	e0b2      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa8:	e09e      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d134      	bne.n	8004022 <HAL_SPI_TransmitReceive+0x30a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02f      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x30a>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d12c      	bne.n	8004022 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d912      	bls.n	8003ff8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b02      	subs	r3, #2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ff6:	e012      	b.n	800401e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d148      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x3aa>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d042      	beq.n	80040c2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d923      	bls.n	8004090 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	b292      	uxth	r2, r2
 8004054:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b02      	subs	r3, #2
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d81f      	bhi.n	80040be <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e016      	b.n	80040be <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f103 020c 	add.w	r2, r3, #12
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040be:	2301      	movs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040c2:	f7fd fb2b 	bl	800171c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_TransmitReceive+0x3c2>
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x3c8>
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040e6:	e01c      	b.n	8004122 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f af5b 	bne.w	8003faa <HAL_SPI_TransmitReceive+0x292>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af54 	bne.w	8003faa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f948 	bl	800439c <SPI_EndRxTxTransaction>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
 800411e:	e000      	b.n	8004122 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004136:	4618      	mov	r0, r3
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414e:	e04c      	b.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004156:	d048      	beq.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004158:	f7fd fae0 	bl	800171c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d902      	bls.n	800416e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d13d      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800417c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004186:	d111      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d004      	beq.n	800419c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d107      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d10f      	bne.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d1a3      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004220:	e057      	b.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004228:	d106      	bne.n	8004238 <SPI_WaitFifoStateUntilTimeout+0x26>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	d048      	beq.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004240:	f7fd fa6c 	bl	800171c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d13d      	bne.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d111      	bne.n	8004294 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d004      	beq.n	8004284 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d107      	bne.n	8004294 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429c:	d10f      	bne.n	80042be <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e008      	b.n	80042e4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d19f      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004300:	d111      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d004      	beq.n	8004316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d107      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff04 	bl	800413e <SPI_WaitFlagStateUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e023      	b.n	8004394 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004354:	d11d      	bne.n	8004392 <SPI_EndRxTransaction+0xa6>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435e:	d004      	beq.n	800436a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d113      	bne.n	8004392 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff ff4b 	bl	8004212 <SPI_WaitFifoStateUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e000      	b.n	8004394 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff ff2c 	bl	8004212 <SPI_WaitFifoStateUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e027      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff feaf 	bl	800413e <SPI_WaitFlagStateUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e014      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff ff05 	bl	8004212 <SPI_WaitFifoStateUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e000      	b.n	8004420 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e040      	b.n	80044bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc ffb4 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa72 	bl	8004950 <UART_SetConfig>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fdd8 	bl	8005034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fe5f 	bl	8005178 <UART_CheckIdleState>
 80044ba:	4603      	mov	r3, r0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d144      	bne.n	8004564 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_UART_Transmit_IT+0x22>
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e03d      	b.n	8004566 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Transmit_IT+0x34>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e036      	b.n	8004566 <HAL_UART_Transmit_IT+0xa2>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2221      	movs	r2, #33	; 0x21
 8004526:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d107      	bne.n	8004542 <HAL_UART_Transmit_IT+0x7e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <HAL_UART_Transmit_IT+0xb0>)
 800453e:	665a      	str	r2, [r3, #100]	; 0x64
 8004540:	e002      	b.n	8004548 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_UART_Transmit_IT+0xb4>)
 8004546:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800455e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	080053d9 	.word	0x080053d9
 8004578:	08005365 	.word	0x08005365

0800457c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004592:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d124      	bne.n	80045fc <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ce:	2200      	movs	r2, #0
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd fa76 	bl	8001ac8 <HAL_DMA_Abort>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fb9c 	bl	8001d24 <HAL_DMA_GetError>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d104      	bne.n	80045fc <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2210      	movs	r2, #16
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e04b      	b.n	8004694 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d124      	bne.n	8004654 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	2200      	movs	r2, #0
 8004628:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd fa4a 	bl	8001ac8 <HAL_DMA_Abort>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	4618      	mov	r0, r3
 8004640:	f7fd fb70 	bl	8001d24 <HAL_DMA_GetError>
 8004644:	4603      	mov	r3, r0
 8004646:	2b20      	cmp	r3, #32
 8004648:	d104      	bne.n	8004654 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2210      	movs	r2, #16
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e01f      	b.n	8004694 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	220f      	movs	r2, #15
 800466a:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	8b1b      	ldrh	r3, [r3, #24]
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0208 	orr.w	r2, r2, #8
 800467c:	b292      	uxth	r2, r2
 800467e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	f640 030f 	movw	r3, #2063	; 0x80f
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d113      	bne.n	80046f4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8114 	beq.w	8004912 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
      }
      return;
 80046f2:	e10e      	b.n	8004912 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80d6 	beq.w	80048a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80cb 	beq.w	80048a8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <HAL_UART_IRQHandler+0x9e>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004732:	f043 0201 	orr.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <HAL_UART_IRQHandler+0xc6>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2202      	movs	r2, #2
 8004754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_UART_IRQHandler+0xee>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2204      	movs	r2, #4
 800477c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2208      	movs	r2, #8
 80047ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	f043 0208 	orr.w	r2, r3, #8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00f      	beq.n	80047e6 <HAL_UART_IRQHandler+0x14a>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8093 	beq.w	8004916 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004818:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d004      	beq.n	8004832 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d031      	beq.n	8004896 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fd60 	bl	80052f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d123      	bne.n	800488e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004854:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_UART_IRQHandler+0x288>)
 8004864:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	4618      	mov	r0, r3
 800486c:	f7fd f96a 	bl	8001b44 <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e00e      	b.n	80048a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f858 	bl	800493c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00a      	b.n	80048a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f854 	bl	800493c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e006      	b.n	80048a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f850 	bl	800493c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048a2:	e038      	b.n	8004916 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	bf00      	nop
    return;
 80048a6:	e036      	b.n	8004916 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <HAL_UART_IRQHandler+0x232>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fddd 	bl	8005486 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048cc:	e026      	b.n	800491c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d017      	beq.n	800491a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
    }
    return;
 80048f2:	e012      	b.n	800491a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00e      	beq.n	800491c <HAL_UART_IRQHandler+0x280>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fda3 	bl	8005454 <UART_EndTransmit_IT>
    return;
 800490e:	bf00      	nop
 8004910:	e004      	b.n	800491c <HAL_UART_IRQHandler+0x280>
      return;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <HAL_UART_IRQHandler+0x280>
    return;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_UART_IRQHandler+0x280>
    return;
 800491a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	08005339 	.word	0x08005339

08004928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004950:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004954:	b08a      	sub	sp, #40	; 0x28
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4313      	orrs	r3, r2
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4bb8      	ldr	r3, [pc, #736]	; (8004c68 <UART_SetConfig+0x318>)
 8004986:	4013      	ands	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498e:	430b      	orrs	r3, r1
 8004990:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4aae      	ldr	r2, [pc, #696]	; (8004c6c <UART_SetConfig+0x31c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	4313      	orrs	r3, r2
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4aa5      	ldr	r2, [pc, #660]	; (8004c70 <UART_SetConfig+0x320>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d126      	bne.n	8004a2e <UART_SetConfig+0xde>
 80049e0:	4ba4      	ldr	r3, [pc, #656]	; (8004c74 <UART_SetConfig+0x324>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d81a      	bhi.n	8004a24 <UART_SetConfig+0xd4>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0xa4>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a15 	.word	0x08004a15
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e105      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e101      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e0fd      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e0f9      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	bf00      	nop
 8004a2c:	e0f4      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a91      	ldr	r2, [pc, #580]	; (8004c78 <UART_SetConfig+0x328>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d138      	bne.n	8004aaa <UART_SetConfig+0x15a>
 8004a38:	4b8e      	ldr	r3, [pc, #568]	; (8004c74 <UART_SetConfig+0x324>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d82c      	bhi.n	8004aa0 <UART_SetConfig+0x150>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0xfc>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	08004aa1 	.word	0x08004aa1
 8004a58:	08004aa1 	.word	0x08004aa1
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004aa1 	.word	0x08004aa1
 8004a68:	08004aa1 	.word	0x08004aa1
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	08004aa1 	.word	0x08004aa1
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004a99 	.word	0x08004a99
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a86:	e0c7      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e0c3      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e0bf      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e0bb      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	bf00      	nop
 8004aa8:	e0b6      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a73      	ldr	r2, [pc, #460]	; (8004c7c <UART_SetConfig+0x32c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d125      	bne.n	8004b00 <UART_SetConfig+0x1b0>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <UART_SetConfig+0x324>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d011      	beq.n	8004ae6 <UART_SetConfig+0x196>
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d802      	bhi.n	8004acc <UART_SetConfig+0x17c>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <UART_SetConfig+0x186>
 8004aca:	e014      	b.n	8004af6 <UART_SetConfig+0x1a6>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d006      	beq.n	8004ade <UART_SetConfig+0x18e>
 8004ad0:	2b30      	cmp	r3, #48	; 0x30
 8004ad2:	d00c      	beq.n	8004aee <UART_SetConfig+0x19e>
 8004ad4:	e00f      	b.n	8004af6 <UART_SetConfig+0x1a6>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004adc:	e09c      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae4:	e098      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aec:	e094      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004aee:	2308      	movs	r3, #8
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e090      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004af6:	2310      	movs	r3, #16
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afc:	bf00      	nop
 8004afe:	e08b      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <UART_SetConfig+0x330>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d125      	bne.n	8004b56 <UART_SetConfig+0x206>
 8004b0a:	4b5a      	ldr	r3, [pc, #360]	; (8004c74 <UART_SetConfig+0x324>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d011      	beq.n	8004b3c <UART_SetConfig+0x1ec>
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d802      	bhi.n	8004b22 <UART_SetConfig+0x1d2>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <UART_SetConfig+0x1dc>
 8004b20:	e014      	b.n	8004b4c <UART_SetConfig+0x1fc>
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d006      	beq.n	8004b34 <UART_SetConfig+0x1e4>
 8004b26:	2bc0      	cmp	r3, #192	; 0xc0
 8004b28:	d00c      	beq.n	8004b44 <UART_SetConfig+0x1f4>
 8004b2a:	e00f      	b.n	8004b4c <UART_SetConfig+0x1fc>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e071      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b34:	2302      	movs	r3, #2
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e06d      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e069      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e065      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	bf00      	nop
 8004b54:	e060      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4a      	ldr	r2, [pc, #296]	; (8004c84 <UART_SetConfig+0x334>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d129      	bne.n	8004bb4 <UART_SetConfig+0x264>
 8004b60:	4b44      	ldr	r3, [pc, #272]	; (8004c74 <UART_SetConfig+0x324>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d014      	beq.n	8004b9a <UART_SetConfig+0x24a>
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	d802      	bhi.n	8004b7c <UART_SetConfig+0x22c>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <UART_SetConfig+0x23a>
 8004b7a:	e016      	b.n	8004baa <UART_SetConfig+0x25a>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d007      	beq.n	8004b92 <UART_SetConfig+0x242>
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b86:	d00c      	beq.n	8004ba2 <UART_SetConfig+0x252>
 8004b88:	e00f      	b.n	8004baa <UART_SetConfig+0x25a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b90:	e042      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b92:	2302      	movs	r3, #2
 8004b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b98:	e03e      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba0:	e03a      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba8:	e036      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004baa:	2310      	movs	r3, #16
 8004bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb0:	bf00      	nop
 8004bb2:	e031      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <UART_SetConfig+0x31c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d129      	bne.n	8004c12 <UART_SetConfig+0x2c2>
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <UART_SetConfig+0x324>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d014      	beq.n	8004bf8 <UART_SetConfig+0x2a8>
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd2:	d802      	bhi.n	8004bda <UART_SetConfig+0x28a>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_SetConfig+0x298>
 8004bd8:	e016      	b.n	8004c08 <UART_SetConfig+0x2b8>
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d007      	beq.n	8004bf0 <UART_SetConfig+0x2a0>
 8004be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be4:	d00c      	beq.n	8004c00 <UART_SetConfig+0x2b0>
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x2b8>
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e013      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e00b      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004c00:	2308      	movs	r3, #8
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e007      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <UART_SetConfig+0x2c8>
 8004c12:	2310      	movs	r3, #16
 8004c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <UART_SetConfig+0x31c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f040 80fe 	bne.w	8004e20 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d837      	bhi.n	8004c9c <UART_SetConfig+0x34c>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x2e4>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c9d 	.word	0x08004c9d
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c9d 	.word	0x08004c9d
 8004c50:	08004c9d 	.word	0x08004c9d
 8004c54:	08004c95 	.word	0x08004c95
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe f80a 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c5e:	e020      	b.n	8004ca2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <UART_SetConfig+0x338>)
 8004c62:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c64:	e01d      	b.n	8004ca2 <UART_SetConfig+0x352>
 8004c66:	bf00      	nop
 8004c68:	efff69f3 	.word	0xefff69f3
 8004c6c:	40008000 	.word	0x40008000
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40004400 	.word	0x40004400
 8004c7c:	40004800 	.word	0x40004800
 8004c80:	40004c00 	.word	0x40004c00
 8004c84:	40005000 	.word	0x40005000
 8004c88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004c8c:	f7fd ff5a 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004c90:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c92:	e006      	b.n	8004ca2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c9a:	e002      	b.n	8004ca2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	76fb      	strb	r3, [r7, #27]
        break;
 8004ca0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 81b9 	beq.w	800501c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d305      	bcc.n	8004cc6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d902      	bls.n	8004ccc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e1a7      	b.n	800501c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	f200 8092 	bhi.w	8004dfa <UART_SetConfig+0x4aa>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x38c>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004dfb 	.word	0x08004dfb
 8004ce4:	08004d4f 	.word	0x08004d4f
 8004ce8:	08004dfb 	.word	0x08004dfb
 8004cec:	08004d83 	.word	0x08004d83
 8004cf0:	08004dfb 	.word	0x08004dfb
 8004cf4:	08004dfb 	.word	0x08004dfb
 8004cf8:	08004dfb 	.word	0x08004dfb
 8004cfc:	08004dd1 	.word	0x08004dd1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fd ffb6 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004d04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	f04f 0400 	mov.w	r4, #0
 8004d16:	0214      	lsls	r4, r2, #8
 8004d18:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d1c:	020b      	lsls	r3, r1, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6852      	ldr	r2, [r2, #4]
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	4611      	mov	r1, r2
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	eb13 0b01 	adds.w	fp, r3, r1
 8004d2e:	eb44 0c02 	adc.w	ip, r4, r2
 8004d32:	4658      	mov	r0, fp
 8004d34:	4661      	mov	r1, ip
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f04f 0400 	mov.w	r4, #0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4623      	mov	r3, r4
 8004d42:	f7fb fa95 	bl	8000270 <__aeabi_uldivmod>
 8004d46:	4603      	mov	r3, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d4c:	e058      	b.n	8004e00 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	49ae      	ldr	r1, [pc, #696]	; (8005014 <UART_SetConfig+0x6c4>)
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	eb13 0b01 	adds.w	fp, r3, r1
 8004d62:	eb44 0c02 	adc.w	ip, r4, r2
 8004d66:	4658      	mov	r0, fp
 8004d68:	4661      	mov	r1, ip
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fa7b 	bl	8000270 <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d80:	e03e      	b.n	8004e00 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7fd fedf 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004d86:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	f04f 0400 	mov.w	r4, #0
 8004d98:	0214      	lsls	r4, r2, #8
 8004d9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d9e:	020b      	lsls	r3, r1, #8
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	4611      	mov	r1, r2
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	eb13 0b01 	adds.w	fp, r3, r1
 8004db0:	eb44 0c02 	adc.w	ip, r4, r2
 8004db4:	4658      	mov	r0, fp
 8004db6:	4661      	mov	r1, ip
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f04f 0400 	mov.w	r4, #0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	f7fb fa54 	bl	8000270 <__aeabi_uldivmod>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dce:	e017      	b.n	8004e00 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004dde:	f144 0100 	adc.w	r1, r4, #0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	461a      	mov	r2, r3
 8004dec:	4623      	mov	r3, r4
 8004dee:	f7fb fa3f 	bl	8000270 <__aeabi_uldivmod>
 8004df2:	4603      	mov	r3, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004df8:	e002      	b.n	8004e00 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76fb      	strb	r3, [r7, #27]
            break;
 8004dfe:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e06:	d308      	bcc.n	8004e1a <UART_SetConfig+0x4ca>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d204      	bcs.n	8004e1a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e100      	b.n	800501c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e0fd      	b.n	800501c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e28:	f040 8084 	bne.w	8004f34 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d85f      	bhi.n	8004ef4 <UART_SetConfig+0x5a4>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x4ec>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004ef5 	.word	0x08004ef5
 8004e4c:	08004ebd 	.word	0x08004ebd
 8004e50:	08004ef5 	.word	0x08004ef5
 8004e54:	08004ef5 	.word	0x08004ef5
 8004e58:	08004ef5 	.word	0x08004ef5
 8004e5c:	08004edd 	.word	0x08004edd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e60:	f7fd ff06 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004e64:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	005a      	lsls	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e7e:	e03c      	b.n	8004efa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fd ff0c 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004e84:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	005a      	lsls	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e9e:	e02c      	b.n	8004efa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004eaa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6852      	ldr	r2, [r2, #4]
 8004eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eba:	e01e      	b.n	8004efa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebc:	f7fd fe42 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004ec0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eda:	e00e      	b.n	8004efa <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ef2:	e002      	b.n	8004efa <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	76fb      	strb	r3, [r7, #27]
        break;
 8004ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d916      	bls.n	8004f2e <UART_SetConfig+0x5de>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f06:	d212      	bcs.n	8004f2e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f023 030f 	bic.w	r3, r3, #15
 8004f10:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	89fa      	ldrh	r2, [r7, #14]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e076      	b.n	800501c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	76fb      	strb	r3, [r7, #27]
 8004f32:	e073      	b.n	800501c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d85c      	bhi.n	8004ff6 <UART_SetConfig+0x6a6>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x5f4>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004ff7 	.word	0x08004ff7
 8004f54:	08004fc1 	.word	0x08004fc1
 8004f58:	08004ff7 	.word	0x08004ff7
 8004f5c:	08004ff7 	.word	0x08004ff7
 8004f60:	08004ff7 	.word	0x08004ff7
 8004f64:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f68:	f7fd fe82 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085a      	lsrs	r2, r3, #1
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f84:	e03a      	b.n	8004ffc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f86:	f7fd fe89 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004f8a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	085a      	lsrs	r2, r3, #1
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fa2:	e02b      	b.n	8004ffc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004fae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6852      	ldr	r2, [r2, #4]
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fbe:	e01d      	b.n	8004ffc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc0:	f7fd fdc0 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004fc4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	085a      	lsrs	r2, r3, #1
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fdc:	e00e      	b.n	8004ffc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ff4:	e002      	b.n	8004ffc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	76fb      	strb	r3, [r7, #27]
        break;
 8004ffa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d90a      	bls.n	8005018 <UART_SetConfig+0x6c8>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d206      	bcs.n	8005018 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e003      	b.n	800501c <UART_SetConfig+0x6cc>
 8005014:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005028:	7efb      	ldrb	r3, [r7, #27]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01a      	beq.n	800514a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005132:	d10a      	bne.n	800514a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005186:	f7fc fac9 	bl	800171c <HAL_GetTick>
 800518a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b08      	cmp	r3, #8
 8005198:	d10e      	bne.n	80051b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f82a 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e020      	b.n	80051fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d10e      	bne.n	80051e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f814 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e00a      	b.n	80051fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005212:	e05d      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521a:	d059      	beq.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521c:	f7fc fa7e 	bl	800171c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	429a      	cmp	r2, r3
 800522a:	d302      	bcc.n	8005232 <UART_WaitOnFlagUntilTimeout+0x30>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d11b      	bne.n	800526a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005240:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e042      	b.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02b      	beq.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005286:	d123      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005290:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e00f      	b.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d092      	beq.n	8005214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800530e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff faf0 	bl	800493c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	2b21      	cmp	r3, #33	; 0x21
 8005372:	d12b      	bne.n	80053cc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80053a0:	e014      	b.n	80053cc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b292      	uxth	r2, r2
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e4:	2b21      	cmp	r3, #33	; 0x21
 80053e6:	d12f      	bne.n	8005448 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d110      	bne.n	8005416 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005402:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005412:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005414:	e018      	b.n	8005448 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005428:	b292      	uxth	r2, r2
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fa55 	bl	8004928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000000c 	.word	0x2000000c

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4e0d      	ldr	r6, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1ba4      	subs	r4, r4, r6
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2500      	movs	r5, #0
 80054b4:	42a5      	cmp	r5, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4e0b      	ldr	r6, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f000 fc26 	bl	8005d0c <_init>
 80054c0:	1ba4      	subs	r4, r4, r6
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2500      	movs	r5, #0
 80054c6:	42a5      	cmp	r5, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054d0:	4798      	blx	r3
 80054d2:	3501      	adds	r5, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054da:	4798      	blx	r3
 80054dc:	3501      	adds	r5, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08005de0 	.word	0x08005de0
 80054e4:	08005de0 	.word	0x08005de0
 80054e8:	08005de0 	.word	0x08005de0
 80054ec:	08005de4 	.word	0x08005de4

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <siprintf>:
 8005500:	b40e      	push	{r1, r2, r3}
 8005502:	b500      	push	{lr}
 8005504:	b09c      	sub	sp, #112	; 0x70
 8005506:	ab1d      	add	r3, sp, #116	; 0x74
 8005508:	9002      	str	r0, [sp, #8]
 800550a:	9006      	str	r0, [sp, #24]
 800550c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005510:	4809      	ldr	r0, [pc, #36]	; (8005538 <siprintf+0x38>)
 8005512:	9107      	str	r1, [sp, #28]
 8005514:	9104      	str	r1, [sp, #16]
 8005516:	4909      	ldr	r1, [pc, #36]	; (800553c <siprintf+0x3c>)
 8005518:	f853 2b04 	ldr.w	r2, [r3], #4
 800551c:	9105      	str	r1, [sp, #20]
 800551e:	6800      	ldr	r0, [r0, #0]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	a902      	add	r1, sp, #8
 8005524:	f000 f866 	bl	80055f4 <_svfiprintf_r>
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	b01c      	add	sp, #112	; 0x70
 8005530:	f85d eb04 	ldr.w	lr, [sp], #4
 8005534:	b003      	add	sp, #12
 8005536:	4770      	bx	lr
 8005538:	2000000c 	.word	0x2000000c
 800553c:	ffff0208 	.word	0xffff0208

08005540 <__ssputs_r>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	688e      	ldr	r6, [r1, #8]
 8005546:	429e      	cmp	r6, r3
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4690      	mov	r8, r2
 800554e:	4699      	mov	r9, r3
 8005550:	d837      	bhi.n	80055c2 <__ssputs_r+0x82>
 8005552:	898a      	ldrh	r2, [r1, #12]
 8005554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005558:	d031      	beq.n	80055be <__ssputs_r+0x7e>
 800555a:	6825      	ldr	r5, [r4, #0]
 800555c:	6909      	ldr	r1, [r1, #16]
 800555e:	1a6f      	subs	r7, r5, r1
 8005560:	6965      	ldr	r5, [r4, #20]
 8005562:	2302      	movs	r3, #2
 8005564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005568:	fb95 f5f3 	sdiv	r5, r5, r3
 800556c:	f109 0301 	add.w	r3, r9, #1
 8005570:	443b      	add	r3, r7
 8005572:	429d      	cmp	r5, r3
 8005574:	bf38      	it	cc
 8005576:	461d      	movcc	r5, r3
 8005578:	0553      	lsls	r3, r2, #21
 800557a:	d530      	bpl.n	80055de <__ssputs_r+0x9e>
 800557c:	4629      	mov	r1, r5
 800557e:	f000 fb2b 	bl	8005bd8 <_malloc_r>
 8005582:	4606      	mov	r6, r0
 8005584:	b950      	cbnz	r0, 800559c <__ssputs_r+0x5c>
 8005586:	230c      	movs	r3, #12
 8005588:	f8ca 3000 	str.w	r3, [sl]
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	463a      	mov	r2, r7
 800559e:	6921      	ldr	r1, [r4, #16]
 80055a0:	f000 faa8 	bl	8005af4 <memcpy>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	6126      	str	r6, [r4, #16]
 80055b2:	6165      	str	r5, [r4, #20]
 80055b4:	443e      	add	r6, r7
 80055b6:	1bed      	subs	r5, r5, r7
 80055b8:	6026      	str	r6, [r4, #0]
 80055ba:	60a5      	str	r5, [r4, #8]
 80055bc:	464e      	mov	r6, r9
 80055be:	454e      	cmp	r6, r9
 80055c0:	d900      	bls.n	80055c4 <__ssputs_r+0x84>
 80055c2:	464e      	mov	r6, r9
 80055c4:	4632      	mov	r2, r6
 80055c6:	4641      	mov	r1, r8
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	f000 fa9e 	bl	8005b0a <memmove>
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	1b9b      	subs	r3, r3, r6
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	441e      	add	r6, r3
 80055d8:	6026      	str	r6, [r4, #0]
 80055da:	2000      	movs	r0, #0
 80055dc:	e7dc      	b.n	8005598 <__ssputs_r+0x58>
 80055de:	462a      	mov	r2, r5
 80055e0:	f000 fb54 	bl	8005c8c <_realloc_r>
 80055e4:	4606      	mov	r6, r0
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d1e2      	bne.n	80055b0 <__ssputs_r+0x70>
 80055ea:	6921      	ldr	r1, [r4, #16]
 80055ec:	4650      	mov	r0, sl
 80055ee:	f000 faa5 	bl	8005b3c <_free_r>
 80055f2:	e7c8      	b.n	8005586 <__ssputs_r+0x46>

080055f4 <_svfiprintf_r>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	461d      	mov	r5, r3
 80055fa:	898b      	ldrh	r3, [r1, #12]
 80055fc:	061f      	lsls	r7, r3, #24
 80055fe:	b09d      	sub	sp, #116	; 0x74
 8005600:	4680      	mov	r8, r0
 8005602:	460c      	mov	r4, r1
 8005604:	4616      	mov	r6, r2
 8005606:	d50f      	bpl.n	8005628 <_svfiprintf_r+0x34>
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	b96b      	cbnz	r3, 8005628 <_svfiprintf_r+0x34>
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	f000 fae3 	bl	8005bd8 <_malloc_r>
 8005612:	6020      	str	r0, [r4, #0]
 8005614:	6120      	str	r0, [r4, #16]
 8005616:	b928      	cbnz	r0, 8005624 <_svfiprintf_r+0x30>
 8005618:	230c      	movs	r3, #12
 800561a:	f8c8 3000 	str.w	r3, [r8]
 800561e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005622:	e0c8      	b.n	80057b6 <_svfiprintf_r+0x1c2>
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	6163      	str	r3, [r4, #20]
 8005628:	2300      	movs	r3, #0
 800562a:	9309      	str	r3, [sp, #36]	; 0x24
 800562c:	2320      	movs	r3, #32
 800562e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005632:	2330      	movs	r3, #48	; 0x30
 8005634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005638:	9503      	str	r5, [sp, #12]
 800563a:	f04f 0b01 	mov.w	fp, #1
 800563e:	4637      	mov	r7, r6
 8005640:	463d      	mov	r5, r7
 8005642:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005646:	b10b      	cbz	r3, 800564c <_svfiprintf_r+0x58>
 8005648:	2b25      	cmp	r3, #37	; 0x25
 800564a:	d13e      	bne.n	80056ca <_svfiprintf_r+0xd6>
 800564c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005650:	d00b      	beq.n	800566a <_svfiprintf_r+0x76>
 8005652:	4653      	mov	r3, sl
 8005654:	4632      	mov	r2, r6
 8005656:	4621      	mov	r1, r4
 8005658:	4640      	mov	r0, r8
 800565a:	f7ff ff71 	bl	8005540 <__ssputs_r>
 800565e:	3001      	adds	r0, #1
 8005660:	f000 80a4 	beq.w	80057ac <_svfiprintf_r+0x1b8>
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	4453      	add	r3, sl
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	783b      	ldrb	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 809d 	beq.w	80057ac <_svfiprintf_r+0x1b8>
 8005672:	2300      	movs	r3, #0
 8005674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005684:	931a      	str	r3, [sp, #104]	; 0x68
 8005686:	462f      	mov	r7, r5
 8005688:	2205      	movs	r2, #5
 800568a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800568e:	4850      	ldr	r0, [pc, #320]	; (80057d0 <_svfiprintf_r+0x1dc>)
 8005690:	f7fa fd9e 	bl	80001d0 <memchr>
 8005694:	9b04      	ldr	r3, [sp, #16]
 8005696:	b9d0      	cbnz	r0, 80056ce <_svfiprintf_r+0xda>
 8005698:	06d9      	lsls	r1, r3, #27
 800569a:	bf44      	itt	mi
 800569c:	2220      	movmi	r2, #32
 800569e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056a2:	071a      	lsls	r2, r3, #28
 80056a4:	bf44      	itt	mi
 80056a6:	222b      	movmi	r2, #43	; 0x2b
 80056a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056ac:	782a      	ldrb	r2, [r5, #0]
 80056ae:	2a2a      	cmp	r2, #42	; 0x2a
 80056b0:	d015      	beq.n	80056de <_svfiprintf_r+0xea>
 80056b2:	9a07      	ldr	r2, [sp, #28]
 80056b4:	462f      	mov	r7, r5
 80056b6:	2000      	movs	r0, #0
 80056b8:	250a      	movs	r5, #10
 80056ba:	4639      	mov	r1, r7
 80056bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c0:	3b30      	subs	r3, #48	; 0x30
 80056c2:	2b09      	cmp	r3, #9
 80056c4:	d94d      	bls.n	8005762 <_svfiprintf_r+0x16e>
 80056c6:	b1b8      	cbz	r0, 80056f8 <_svfiprintf_r+0x104>
 80056c8:	e00f      	b.n	80056ea <_svfiprintf_r+0xf6>
 80056ca:	462f      	mov	r7, r5
 80056cc:	e7b8      	b.n	8005640 <_svfiprintf_r+0x4c>
 80056ce:	4a40      	ldr	r2, [pc, #256]	; (80057d0 <_svfiprintf_r+0x1dc>)
 80056d0:	1a80      	subs	r0, r0, r2
 80056d2:	fa0b f000 	lsl.w	r0, fp, r0
 80056d6:	4318      	orrs	r0, r3
 80056d8:	9004      	str	r0, [sp, #16]
 80056da:	463d      	mov	r5, r7
 80056dc:	e7d3      	b.n	8005686 <_svfiprintf_r+0x92>
 80056de:	9a03      	ldr	r2, [sp, #12]
 80056e0:	1d11      	adds	r1, r2, #4
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	9103      	str	r1, [sp, #12]
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	db01      	blt.n	80056ee <_svfiprintf_r+0xfa>
 80056ea:	9207      	str	r2, [sp, #28]
 80056ec:	e004      	b.n	80056f8 <_svfiprintf_r+0x104>
 80056ee:	4252      	negs	r2, r2
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	9207      	str	r2, [sp, #28]
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	783b      	ldrb	r3, [r7, #0]
 80056fa:	2b2e      	cmp	r3, #46	; 0x2e
 80056fc:	d10c      	bne.n	8005718 <_svfiprintf_r+0x124>
 80056fe:	787b      	ldrb	r3, [r7, #1]
 8005700:	2b2a      	cmp	r3, #42	; 0x2a
 8005702:	d133      	bne.n	800576c <_svfiprintf_r+0x178>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	9203      	str	r2, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfb8      	it	lt
 8005710:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005714:	3702      	adds	r7, #2
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	4d2e      	ldr	r5, [pc, #184]	; (80057d4 <_svfiprintf_r+0x1e0>)
 800571a:	7839      	ldrb	r1, [r7, #0]
 800571c:	2203      	movs	r2, #3
 800571e:	4628      	mov	r0, r5
 8005720:	f7fa fd56 	bl	80001d0 <memchr>
 8005724:	b138      	cbz	r0, 8005736 <_svfiprintf_r+0x142>
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	1b40      	subs	r0, r0, r5
 800572a:	fa03 f000 	lsl.w	r0, r3, r0
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	4303      	orrs	r3, r0
 8005732:	3701      	adds	r7, #1
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	7839      	ldrb	r1, [r7, #0]
 8005738:	4827      	ldr	r0, [pc, #156]	; (80057d8 <_svfiprintf_r+0x1e4>)
 800573a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573e:	2206      	movs	r2, #6
 8005740:	1c7e      	adds	r6, r7, #1
 8005742:	f7fa fd45 	bl	80001d0 <memchr>
 8005746:	2800      	cmp	r0, #0
 8005748:	d038      	beq.n	80057bc <_svfiprintf_r+0x1c8>
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <_svfiprintf_r+0x1e8>)
 800574c:	bb13      	cbnz	r3, 8005794 <_svfiprintf_r+0x1a0>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	3307      	adds	r3, #7
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	3308      	adds	r3, #8
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575c:	444b      	add	r3, r9
 800575e:	9309      	str	r3, [sp, #36]	; 0x24
 8005760:	e76d      	b.n	800563e <_svfiprintf_r+0x4a>
 8005762:	fb05 3202 	mla	r2, r5, r2, r3
 8005766:	2001      	movs	r0, #1
 8005768:	460f      	mov	r7, r1
 800576a:	e7a6      	b.n	80056ba <_svfiprintf_r+0xc6>
 800576c:	2300      	movs	r3, #0
 800576e:	3701      	adds	r7, #1
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	4619      	mov	r1, r3
 8005774:	250a      	movs	r5, #10
 8005776:	4638      	mov	r0, r7
 8005778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577c:	3a30      	subs	r2, #48	; 0x30
 800577e:	2a09      	cmp	r2, #9
 8005780:	d903      	bls.n	800578a <_svfiprintf_r+0x196>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0c8      	beq.n	8005718 <_svfiprintf_r+0x124>
 8005786:	9105      	str	r1, [sp, #20]
 8005788:	e7c6      	b.n	8005718 <_svfiprintf_r+0x124>
 800578a:	fb05 2101 	mla	r1, r5, r1, r2
 800578e:	2301      	movs	r3, #1
 8005790:	4607      	mov	r7, r0
 8005792:	e7f0      	b.n	8005776 <_svfiprintf_r+0x182>
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4622      	mov	r2, r4
 800579a:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <_svfiprintf_r+0x1ec>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4640      	mov	r0, r8
 80057a0:	f3af 8000 	nop.w
 80057a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057a8:	4681      	mov	r9, r0
 80057aa:	d1d6      	bne.n	800575a <_svfiprintf_r+0x166>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	065b      	lsls	r3, r3, #25
 80057b0:	f53f af35 	bmi.w	800561e <_svfiprintf_r+0x2a>
 80057b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b6:	b01d      	add	sp, #116	; 0x74
 80057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	4622      	mov	r2, r4
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <_svfiprintf_r+0x1ec>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4640      	mov	r0, r8
 80057c8:	f000 f882 	bl	80058d0 <_printf_i>
 80057cc:	e7ea      	b.n	80057a4 <_svfiprintf_r+0x1b0>
 80057ce:	bf00      	nop
 80057d0:	08005da4 	.word	0x08005da4
 80057d4:	08005daa 	.word	0x08005daa
 80057d8:	08005dae 	.word	0x08005dae
 80057dc:	00000000 	.word	0x00000000
 80057e0:	08005541 	.word	0x08005541

080057e4 <_printf_common>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	4691      	mov	r9, r2
 80057ea:	461f      	mov	r7, r3
 80057ec:	688a      	ldr	r2, [r1, #8]
 80057ee:	690b      	ldr	r3, [r1, #16]
 80057f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	bfb8      	it	lt
 80057f8:	4613      	movlt	r3, r2
 80057fa:	f8c9 3000 	str.w	r3, [r9]
 80057fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005802:	4606      	mov	r6, r0
 8005804:	460c      	mov	r4, r1
 8005806:	b112      	cbz	r2, 800580e <_printf_common+0x2a>
 8005808:	3301      	adds	r3, #1
 800580a:	f8c9 3000 	str.w	r3, [r9]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	0699      	lsls	r1, r3, #26
 8005812:	bf42      	ittt	mi
 8005814:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005818:	3302      	addmi	r3, #2
 800581a:	f8c9 3000 	strmi.w	r3, [r9]
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	f015 0506 	ands.w	r5, r5, #6
 8005824:	d107      	bne.n	8005836 <_printf_common+0x52>
 8005826:	f104 0a19 	add.w	sl, r4, #25
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	f8d9 2000 	ldr.w	r2, [r9]
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	42ab      	cmp	r3, r5
 8005834:	dc28      	bgt.n	8005888 <_printf_common+0xa4>
 8005836:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	3300      	adds	r3, #0
 800583e:	bf18      	it	ne
 8005840:	2301      	movne	r3, #1
 8005842:	0692      	lsls	r2, r2, #26
 8005844:	d42d      	bmi.n	80058a2 <_printf_common+0xbe>
 8005846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584a:	4639      	mov	r1, r7
 800584c:	4630      	mov	r0, r6
 800584e:	47c0      	blx	r8
 8005850:	3001      	adds	r0, #1
 8005852:	d020      	beq.n	8005896 <_printf_common+0xb2>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	68e5      	ldr	r5, [r4, #12]
 8005858:	f8d9 2000 	ldr.w	r2, [r9]
 800585c:	f003 0306 	and.w	r3, r3, #6
 8005860:	2b04      	cmp	r3, #4
 8005862:	bf08      	it	eq
 8005864:	1aad      	subeq	r5, r5, r2
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	341a      	adds	r4, #26
 8005880:	454d      	cmp	r5, r9
 8005882:	d11a      	bne.n	80058ba <_printf_common+0xd6>
 8005884:	2000      	movs	r0, #0
 8005886:	e008      	b.n	800589a <_printf_common+0xb6>
 8005888:	2301      	movs	r3, #1
 800588a:	4652      	mov	r2, sl
 800588c:	4639      	mov	r1, r7
 800588e:	4630      	mov	r0, r6
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d103      	bne.n	800589e <_printf_common+0xba>
 8005896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800589a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589e:	3501      	adds	r5, #1
 80058a0:	e7c3      	b.n	800582a <_printf_common+0x46>
 80058a2:	18e1      	adds	r1, r4, r3
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	2030      	movs	r0, #48	; 0x30
 80058a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ac:	4422      	add	r2, r4
 80058ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b6:	3302      	adds	r3, #2
 80058b8:	e7c5      	b.n	8005846 <_printf_common+0x62>
 80058ba:	2301      	movs	r3, #1
 80058bc:	4622      	mov	r2, r4
 80058be:	4639      	mov	r1, r7
 80058c0:	4630      	mov	r0, r6
 80058c2:	47c0      	blx	r8
 80058c4:	3001      	adds	r0, #1
 80058c6:	d0e6      	beq.n	8005896 <_printf_common+0xb2>
 80058c8:	f109 0901 	add.w	r9, r9, #1
 80058cc:	e7d8      	b.n	8005880 <_printf_common+0x9c>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058d8:	460c      	mov	r4, r1
 80058da:	7e09      	ldrb	r1, [r1, #24]
 80058dc:	b085      	sub	sp, #20
 80058de:	296e      	cmp	r1, #110	; 0x6e
 80058e0:	4617      	mov	r7, r2
 80058e2:	4606      	mov	r6, r0
 80058e4:	4698      	mov	r8, r3
 80058e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058e8:	f000 80b3 	beq.w	8005a52 <_printf_i+0x182>
 80058ec:	d822      	bhi.n	8005934 <_printf_i+0x64>
 80058ee:	2963      	cmp	r1, #99	; 0x63
 80058f0:	d036      	beq.n	8005960 <_printf_i+0x90>
 80058f2:	d80a      	bhi.n	800590a <_printf_i+0x3a>
 80058f4:	2900      	cmp	r1, #0
 80058f6:	f000 80b9 	beq.w	8005a6c <_printf_i+0x19c>
 80058fa:	2958      	cmp	r1, #88	; 0x58
 80058fc:	f000 8083 	beq.w	8005a06 <_printf_i+0x136>
 8005900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005904:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005908:	e032      	b.n	8005970 <_printf_i+0xa0>
 800590a:	2964      	cmp	r1, #100	; 0x64
 800590c:	d001      	beq.n	8005912 <_printf_i+0x42>
 800590e:	2969      	cmp	r1, #105	; 0x69
 8005910:	d1f6      	bne.n	8005900 <_printf_i+0x30>
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	0605      	lsls	r5, r0, #24
 8005918:	f103 0104 	add.w	r1, r3, #4
 800591c:	d52a      	bpl.n	8005974 <_printf_i+0xa4>
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6011      	str	r1, [r2, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	da03      	bge.n	800592e <_printf_i+0x5e>
 8005926:	222d      	movs	r2, #45	; 0x2d
 8005928:	425b      	negs	r3, r3
 800592a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800592e:	486f      	ldr	r0, [pc, #444]	; (8005aec <_printf_i+0x21c>)
 8005930:	220a      	movs	r2, #10
 8005932:	e039      	b.n	80059a8 <_printf_i+0xd8>
 8005934:	2973      	cmp	r1, #115	; 0x73
 8005936:	f000 809d 	beq.w	8005a74 <_printf_i+0x1a4>
 800593a:	d808      	bhi.n	800594e <_printf_i+0x7e>
 800593c:	296f      	cmp	r1, #111	; 0x6f
 800593e:	d020      	beq.n	8005982 <_printf_i+0xb2>
 8005940:	2970      	cmp	r1, #112	; 0x70
 8005942:	d1dd      	bne.n	8005900 <_printf_i+0x30>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f043 0320 	orr.w	r3, r3, #32
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	e003      	b.n	8005956 <_printf_i+0x86>
 800594e:	2975      	cmp	r1, #117	; 0x75
 8005950:	d017      	beq.n	8005982 <_printf_i+0xb2>
 8005952:	2978      	cmp	r1, #120	; 0x78
 8005954:	d1d4      	bne.n	8005900 <_printf_i+0x30>
 8005956:	2378      	movs	r3, #120	; 0x78
 8005958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800595c:	4864      	ldr	r0, [pc, #400]	; (8005af0 <_printf_i+0x220>)
 800595e:	e055      	b.n	8005a0c <_printf_i+0x13c>
 8005960:	6813      	ldr	r3, [r2, #0]
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6011      	str	r1, [r2, #0]
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005970:	2301      	movs	r3, #1
 8005972:	e08c      	b.n	8005a8e <_printf_i+0x1be>
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6011      	str	r1, [r2, #0]
 8005978:	f010 0f40 	tst.w	r0, #64	; 0x40
 800597c:	bf18      	it	ne
 800597e:	b21b      	sxthne	r3, r3
 8005980:	e7cf      	b.n	8005922 <_printf_i+0x52>
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	6825      	ldr	r5, [r4, #0]
 8005986:	1d18      	adds	r0, r3, #4
 8005988:	6010      	str	r0, [r2, #0]
 800598a:	0628      	lsls	r0, r5, #24
 800598c:	d501      	bpl.n	8005992 <_printf_i+0xc2>
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	e002      	b.n	8005998 <_printf_i+0xc8>
 8005992:	0668      	lsls	r0, r5, #25
 8005994:	d5fb      	bpl.n	800598e <_printf_i+0xbe>
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	4854      	ldr	r0, [pc, #336]	; (8005aec <_printf_i+0x21c>)
 800599a:	296f      	cmp	r1, #111	; 0x6f
 800599c:	bf14      	ite	ne
 800599e:	220a      	movne	r2, #10
 80059a0:	2208      	moveq	r2, #8
 80059a2:	2100      	movs	r1, #0
 80059a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a8:	6865      	ldr	r5, [r4, #4]
 80059aa:	60a5      	str	r5, [r4, #8]
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	f2c0 8095 	blt.w	8005adc <_printf_i+0x20c>
 80059b2:	6821      	ldr	r1, [r4, #0]
 80059b4:	f021 0104 	bic.w	r1, r1, #4
 80059b8:	6021      	str	r1, [r4, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d13d      	bne.n	8005a3a <_printf_i+0x16a>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	f040 808e 	bne.w	8005ae0 <_printf_i+0x210>
 80059c4:	4665      	mov	r5, ip
 80059c6:	2a08      	cmp	r2, #8
 80059c8:	d10b      	bne.n	80059e2 <_printf_i+0x112>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	07db      	lsls	r3, r3, #31
 80059ce:	d508      	bpl.n	80059e2 <_printf_i+0x112>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	6862      	ldr	r2, [r4, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bfde      	ittt	le
 80059d8:	2330      	movle	r3, #48	; 0x30
 80059da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059e2:	ebac 0305 	sub.w	r3, ip, r5
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	f8cd 8000 	str.w	r8, [sp]
 80059ec:	463b      	mov	r3, r7
 80059ee:	aa03      	add	r2, sp, #12
 80059f0:	4621      	mov	r1, r4
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff fef6 	bl	80057e4 <_printf_common>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d14d      	bne.n	8005a98 <_printf_i+0x1c8>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a00:	b005      	add	sp, #20
 8005a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a06:	4839      	ldr	r0, [pc, #228]	; (8005aec <_printf_i+0x21c>)
 8005a08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a0c:	6813      	ldr	r3, [r2, #0]
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	1d1d      	adds	r5, r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6015      	str	r5, [r2, #0]
 8005a16:	060a      	lsls	r2, r1, #24
 8005a18:	d50b      	bpl.n	8005a32 <_printf_i+0x162>
 8005a1a:	07ca      	lsls	r2, r1, #31
 8005a1c:	bf44      	itt	mi
 8005a1e:	f041 0120 	orrmi.w	r1, r1, #32
 8005a22:	6021      	strmi	r1, [r4, #0]
 8005a24:	b91b      	cbnz	r3, 8005a2e <_printf_i+0x15e>
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	f022 0220 	bic.w	r2, r2, #32
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	2210      	movs	r2, #16
 8005a30:	e7b7      	b.n	80059a2 <_printf_i+0xd2>
 8005a32:	064d      	lsls	r5, r1, #25
 8005a34:	bf48      	it	mi
 8005a36:	b29b      	uxthmi	r3, r3
 8005a38:	e7ef      	b.n	8005a1a <_printf_i+0x14a>
 8005a3a:	4665      	mov	r5, ip
 8005a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a40:	fb02 3311 	mls	r3, r2, r1, r3
 8005a44:	5cc3      	ldrb	r3, [r0, r3]
 8005a46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d1f5      	bne.n	8005a3c <_printf_i+0x16c>
 8005a50:	e7b9      	b.n	80059c6 <_printf_i+0xf6>
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	6961      	ldr	r1, [r4, #20]
 8005a58:	1d18      	adds	r0, r3, #4
 8005a5a:	6010      	str	r0, [r2, #0]
 8005a5c:	0628      	lsls	r0, r5, #24
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	d501      	bpl.n	8005a66 <_printf_i+0x196>
 8005a62:	6019      	str	r1, [r3, #0]
 8005a64:	e002      	b.n	8005a6c <_printf_i+0x19c>
 8005a66:	066a      	lsls	r2, r5, #25
 8005a68:	d5fb      	bpl.n	8005a62 <_printf_i+0x192>
 8005a6a:	8019      	strh	r1, [r3, #0]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	4665      	mov	r5, ip
 8005a72:	e7b9      	b.n	80059e8 <_printf_i+0x118>
 8005a74:	6813      	ldr	r3, [r2, #0]
 8005a76:	1d19      	adds	r1, r3, #4
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	681d      	ldr	r5, [r3, #0]
 8005a7c:	6862      	ldr	r2, [r4, #4]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7fa fba5 	bl	80001d0 <memchr>
 8005a86:	b108      	cbz	r0, 8005a8c <_printf_i+0x1bc>
 8005a88:	1b40      	subs	r0, r0, r5
 8005a8a:	6060      	str	r0, [r4, #4]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	2300      	movs	r3, #0
 8005a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a96:	e7a7      	b.n	80059e8 <_printf_i+0x118>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	47c0      	blx	r8
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0aa      	beq.n	80059fc <_printf_i+0x12c>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	079b      	lsls	r3, r3, #30
 8005aaa:	d413      	bmi.n	8005ad4 <_printf_i+0x204>
 8005aac:	68e0      	ldr	r0, [r4, #12]
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	bfb8      	it	lt
 8005ab4:	4618      	movlt	r0, r3
 8005ab6:	e7a3      	b.n	8005a00 <_printf_i+0x130>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	464a      	mov	r2, r9
 8005abc:	4639      	mov	r1, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	47c0      	blx	r8
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d09a      	beq.n	80059fc <_printf_i+0x12c>
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	68e3      	ldr	r3, [r4, #12]
 8005aca:	9a03      	ldr	r2, [sp, #12]
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	42ab      	cmp	r3, r5
 8005ad0:	dcf2      	bgt.n	8005ab8 <_printf_i+0x1e8>
 8005ad2:	e7eb      	b.n	8005aac <_printf_i+0x1dc>
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	f104 0919 	add.w	r9, r4, #25
 8005ada:	e7f5      	b.n	8005ac8 <_printf_i+0x1f8>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1ac      	bne.n	8005a3a <_printf_i+0x16a>
 8005ae0:	7803      	ldrb	r3, [r0, #0]
 8005ae2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aea:	e76c      	b.n	80059c6 <_printf_i+0xf6>
 8005aec:	08005db5 	.word	0x08005db5
 8005af0:	08005dc6 	.word	0x08005dc6

08005af4 <memcpy>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	1e43      	subs	r3, r0, #1
 8005af8:	440a      	add	r2, r1
 8005afa:	4291      	cmp	r1, r2
 8005afc:	d100      	bne.n	8005b00 <memcpy+0xc>
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b08:	e7f7      	b.n	8005afa <memcpy+0x6>

08005b0a <memmove>:
 8005b0a:	4288      	cmp	r0, r1
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	eb01 0302 	add.w	r3, r1, r2
 8005b12:	d807      	bhi.n	8005b24 <memmove+0x1a>
 8005b14:	1e42      	subs	r2, r0, #1
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d00a      	beq.n	8005b30 <memmove+0x26>
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b22:	e7f8      	b.n	8005b16 <memmove+0xc>
 8005b24:	4283      	cmp	r3, r0
 8005b26:	d9f5      	bls.n	8005b14 <memmove+0xa>
 8005b28:	1881      	adds	r1, r0, r2
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	42d3      	cmn	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x28>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x22>

08005b3c <_free_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4605      	mov	r5, r0
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d045      	beq.n	8005bd0 <_free_r+0x94>
 8005b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b48:	1f0c      	subs	r4, r1, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bfb8      	it	lt
 8005b4e:	18e4      	addlt	r4, r4, r3
 8005b50:	f000 f8d2 	bl	8005cf8 <__malloc_lock>
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <_free_r+0x98>)
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	4610      	mov	r0, r2
 8005b5a:	b933      	cbnz	r3, 8005b6a <_free_r+0x2e>
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6014      	str	r4, [r2, #0]
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b66:	f000 b8c8 	b.w	8005cfa <__malloc_unlock>
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d90c      	bls.n	8005b88 <_free_r+0x4c>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1862      	adds	r2, r4, r1
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bf04      	itt	eq
 8005b76:	681a      	ldreq	r2, [r3, #0]
 8005b78:	685b      	ldreq	r3, [r3, #4]
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	bf04      	itt	eq
 8005b7e:	1852      	addeq	r2, r2, r1
 8005b80:	6022      	streq	r2, [r4, #0]
 8005b82:	6004      	str	r4, [r0, #0]
 8005b84:	e7ec      	b.n	8005b60 <_free_r+0x24>
 8005b86:	4613      	mov	r3, r2
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	b10a      	cbz	r2, 8005b90 <_free_r+0x54>
 8005b8c:	42a2      	cmp	r2, r4
 8005b8e:	d9fa      	bls.n	8005b86 <_free_r+0x4a>
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	1858      	adds	r0, r3, r1
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d10b      	bne.n	8005bb0 <_free_r+0x74>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	4401      	add	r1, r0
 8005b9c:	1858      	adds	r0, r3, r1
 8005b9e:	4282      	cmp	r2, r0
 8005ba0:	6019      	str	r1, [r3, #0]
 8005ba2:	d1dd      	bne.n	8005b60 <_free_r+0x24>
 8005ba4:	6810      	ldr	r0, [r2, #0]
 8005ba6:	6852      	ldr	r2, [r2, #4]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	4401      	add	r1, r0
 8005bac:	6019      	str	r1, [r3, #0]
 8005bae:	e7d7      	b.n	8005b60 <_free_r+0x24>
 8005bb0:	d902      	bls.n	8005bb8 <_free_r+0x7c>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	e7d3      	b.n	8005b60 <_free_r+0x24>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	1821      	adds	r1, r4, r0
 8005bbc:	428a      	cmp	r2, r1
 8005bbe:	bf04      	itt	eq
 8005bc0:	6811      	ldreq	r1, [r2, #0]
 8005bc2:	6852      	ldreq	r2, [r2, #4]
 8005bc4:	6062      	str	r2, [r4, #4]
 8005bc6:	bf04      	itt	eq
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	605c      	str	r4, [r3, #4]
 8005bce:	e7c7      	b.n	8005b60 <_free_r+0x24>
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000090 	.word	0x20000090

08005bd8 <_malloc_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	1ccd      	adds	r5, r1, #3
 8005bdc:	f025 0503 	bic.w	r5, r5, #3
 8005be0:	3508      	adds	r5, #8
 8005be2:	2d0c      	cmp	r5, #12
 8005be4:	bf38      	it	cc
 8005be6:	250c      	movcc	r5, #12
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	4606      	mov	r6, r0
 8005bec:	db01      	blt.n	8005bf2 <_malloc_r+0x1a>
 8005bee:	42a9      	cmp	r1, r5
 8005bf0:	d903      	bls.n	8005bfa <_malloc_r+0x22>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	f000 f87d 	bl	8005cf8 <__malloc_lock>
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <_malloc_r+0xac>)
 8005c00:	6814      	ldr	r4, [r2, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	b991      	cbnz	r1, 8005c2c <_malloc_r+0x54>
 8005c06:	4c20      	ldr	r4, [pc, #128]	; (8005c88 <_malloc_r+0xb0>)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	b91b      	cbnz	r3, 8005c14 <_malloc_r+0x3c>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f863 	bl	8005cd8 <_sbrk_r>
 8005c12:	6020      	str	r0, [r4, #0]
 8005c14:	4629      	mov	r1, r5
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 f85e 	bl	8005cd8 <_sbrk_r>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d124      	bne.n	8005c6a <_malloc_r+0x92>
 8005c20:	230c      	movs	r3, #12
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 f868 	bl	8005cfa <__malloc_unlock>
 8005c2a:	e7e4      	b.n	8005bf6 <_malloc_r+0x1e>
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	1b5b      	subs	r3, r3, r5
 8005c30:	d418      	bmi.n	8005c64 <_malloc_r+0x8c>
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d90f      	bls.n	8005c56 <_malloc_r+0x7e>
 8005c36:	600b      	str	r3, [r1, #0]
 8005c38:	50cd      	str	r5, [r1, r3]
 8005c3a:	18cc      	adds	r4, r1, r3
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f85c 	bl	8005cfa <__malloc_unlock>
 8005c42:	f104 000b 	add.w	r0, r4, #11
 8005c46:	1d23      	adds	r3, r4, #4
 8005c48:	f020 0007 	bic.w	r0, r0, #7
 8005c4c:	1ac3      	subs	r3, r0, r3
 8005c4e:	d0d3      	beq.n	8005bf8 <_malloc_r+0x20>
 8005c50:	425a      	negs	r2, r3
 8005c52:	50e2      	str	r2, [r4, r3]
 8005c54:	e7d0      	b.n	8005bf8 <_malloc_r+0x20>
 8005c56:	428c      	cmp	r4, r1
 8005c58:	684b      	ldr	r3, [r1, #4]
 8005c5a:	bf16      	itet	ne
 8005c5c:	6063      	strne	r3, [r4, #4]
 8005c5e:	6013      	streq	r3, [r2, #0]
 8005c60:	460c      	movne	r4, r1
 8005c62:	e7eb      	b.n	8005c3c <_malloc_r+0x64>
 8005c64:	460c      	mov	r4, r1
 8005c66:	6849      	ldr	r1, [r1, #4]
 8005c68:	e7cc      	b.n	8005c04 <_malloc_r+0x2c>
 8005c6a:	1cc4      	adds	r4, r0, #3
 8005c6c:	f024 0403 	bic.w	r4, r4, #3
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d005      	beq.n	8005c80 <_malloc_r+0xa8>
 8005c74:	1a21      	subs	r1, r4, r0
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f82e 	bl	8005cd8 <_sbrk_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d0cf      	beq.n	8005c20 <_malloc_r+0x48>
 8005c80:	6025      	str	r5, [r4, #0]
 8005c82:	e7db      	b.n	8005c3c <_malloc_r+0x64>
 8005c84:	20000090 	.word	0x20000090
 8005c88:	20000094 	.word	0x20000094

08005c8c <_realloc_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	4607      	mov	r7, r0
 8005c90:	4614      	mov	r4, r2
 8005c92:	460e      	mov	r6, r1
 8005c94:	b921      	cbnz	r1, 8005ca0 <_realloc_r+0x14>
 8005c96:	4611      	mov	r1, r2
 8005c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c9c:	f7ff bf9c 	b.w	8005bd8 <_malloc_r>
 8005ca0:	b922      	cbnz	r2, 8005cac <_realloc_r+0x20>
 8005ca2:	f7ff ff4b 	bl	8005b3c <_free_r>
 8005ca6:	4625      	mov	r5, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cac:	f000 f826 	bl	8005cfc <_malloc_usable_size_r>
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d20f      	bcs.n	8005cd4 <_realloc_r+0x48>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ff8e 	bl	8005bd8 <_malloc_r>
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0f2      	beq.n	8005ca8 <_realloc_r+0x1c>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	f7ff ff15 	bl	8005af4 <memcpy>
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff35 	bl	8005b3c <_free_r>
 8005cd2:	e7e9      	b.n	8005ca8 <_realloc_r+0x1c>
 8005cd4:	4635      	mov	r5, r6
 8005cd6:	e7e7      	b.n	8005ca8 <_realloc_r+0x1c>

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4c06      	ldr	r4, [pc, #24]	; (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4605      	mov	r5, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	f7fb fc22 	bl	800152c <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000320 	.word	0x20000320

08005cf8 <__malloc_lock>:
 8005cf8:	4770      	bx	lr

08005cfa <__malloc_unlock>:
 8005cfa:	4770      	bx	lr

08005cfc <_malloc_usable_size_r>:
 8005cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d00:	1f18      	subs	r0, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfbc      	itt	lt
 8005d06:	580b      	ldrlt	r3, [r1, r0]
 8005d08:	18c0      	addlt	r0, r0, r3
 8005d0a:	4770      	bx	lr

08005d0c <_init>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr

08005d18 <_fini>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr
